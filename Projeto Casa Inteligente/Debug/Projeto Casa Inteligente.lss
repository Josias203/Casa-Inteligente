
Projeto Casa Inteligente.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  0000122a  000012be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000122a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000202  008001aa  008001aa  00001368  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001368  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001398  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000013d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001db8  00000000  00000000  000014e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1e  00000000  00000000  00003298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d61  00000000  00000000  00003cb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000314  00000000  00000000  00004a18  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005c4  00000000  00000000  00004d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ce5  00000000  00000000  000052f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005fd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__ctors_end>
       4:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__vector_1>
       8:	0c 94 a4 04 	jmp	0x948	; 0x948 <__vector_2>
       c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      10:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      14:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      18:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      1c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      20:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      24:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      28:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      2c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      30:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      34:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      38:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      3c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      40:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      44:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      48:	0c 94 44 02 	jmp	0x488	; 0x488 <__vector_18>
      4c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      50:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      54:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <__vector_21>
      58:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      5c:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      60:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      64:	0c 94 89 01 	jmp	0x312	; 0x312 <__bad_interrupt>
      68:	f1 02       	muls	r31, r17
      6a:	f1 02       	muls	r31, r17
      6c:	f1 02       	muls	r31, r17
      6e:	f1 02       	muls	r31, r17
      70:	f1 02       	muls	r31, r17
      72:	28 03       	fmul	r18, r16
      74:	28 03       	fmul	r18, r16
      76:	28 03       	fmul	r18, r16
      78:	28 03       	fmul	r18, r16
      7a:	28 03       	fmul	r18, r16
      7c:	3e 04       	cpc	r3, r14
      7e:	3e 04       	cpc	r3, r14
      80:	3e 04       	cpc	r3, r14
      82:	3e 04       	cpc	r3, r14
      84:	3e 04       	cpc	r3, r14
      86:	3e 04       	cpc	r3, r14
      88:	3e 04       	cpc	r3, r14
      8a:	3e 04       	cpc	r3, r14
      8c:	3e 04       	cpc	r3, r14
      8e:	3e 04       	cpc	r3, r14
      90:	3e 04       	cpc	r3, r14
      92:	3e 04       	cpc	r3, r14
      94:	3e 04       	cpc	r3, r14
      96:	3e 04       	cpc	r3, r14
      98:	3e 04       	cpc	r3, r14
      9a:	3e 04       	cpc	r3, r14
      9c:	3e 04       	cpc	r3, r14
      9e:	3e 04       	cpc	r3, r14
      a0:	3e 04       	cpc	r3, r14
      a2:	3e 04       	cpc	r3, r14
      a4:	3e 04       	cpc	r3, r14
      a6:	3e 04       	cpc	r3, r14
      a8:	3e 04       	cpc	r3, r14
      aa:	3e 04       	cpc	r3, r14
      ac:	3e 04       	cpc	r3, r14
      ae:	3e 04       	cpc	r3, r14
      b0:	3e 04       	cpc	r3, r14
      b2:	3e 04       	cpc	r3, r14
      b4:	3e 04       	cpc	r3, r14
      b6:	3e 04       	cpc	r3, r14
      b8:	3e 04       	cpc	r3, r14
      ba:	3e 04       	cpc	r3, r14
      bc:	3e 04       	cpc	r3, r14
      be:	3e 04       	cpc	r3, r14
      c0:	3e 04       	cpc	r3, r14
      c2:	3e 04       	cpc	r3, r14
      c4:	3e 04       	cpc	r3, r14
      c6:	3e 04       	cpc	r3, r14
      c8:	3e 04       	cpc	r3, r14
      ca:	61 03       	mulsu	r22, r17
      cc:	3e 04       	cpc	r3, r14
      ce:	3e 04       	cpc	r3, r14
      d0:	3e 04       	cpc	r3, r14
      d2:	ab 02       	muls	r26, r27
      d4:	3e 04       	cpc	r3, r14
      d6:	3e 04       	cpc	r3, r14
      d8:	3e 04       	cpc	r3, r14
      da:	3e 04       	cpc	r3, r14
      dc:	3e 04       	cpc	r3, r14
      de:	3e 04       	cpc	r3, r14
      e0:	3e 04       	cpc	r3, r14
      e2:	3e 04       	cpc	r3, r14
      e4:	3e 04       	cpc	r3, r14
      e6:	3e 04       	cpc	r3, r14
      e8:	3e 04       	cpc	r3, r14
      ea:	65 02       	muls	r22, r21
      ec:	ce 02       	muls	r28, r30
      ee:	d0 03       	fmuls	r21, r16
      f0:	3e 04       	cpc	r3, r14
      f2:	3e 04       	cpc	r3, r14
      f4:	3e 04       	cpc	r3, r14
      f6:	88 02       	muls	r24, r24

000000f8 <CHARSET>:
      f8:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     108:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     118:	55 22 50 00 05 03 00 00 00 1c 22 41 00 00 41 22     U"P......."A..A"
     128:	1c 00 14 08 3e 08 14 08 08 3e 08 08 00 50 30 00     ....>....>...P0.
     138:	00 08 08 08 08 08 00 60 60 00 00 20 10 08 04 02     .......``.. ....
     148:	3e 51 49 45 3e 00 42 7f 40 00 42 61 51 49 46 21     >QIE>.B.@.BaQIF!
     158:	41 45 4b 31 18 14 12 7f 10 27 45 45 45 39 3c 4a     AEK1.....'EEE9<J
     168:	49 49 30 01 71 09 05 03 36 49 49 49 36 06 49 49     II0.q...6III6.II
     178:	29 1e 00 36 36 00 00 00 56 36 00 00 08 14 22 41     )..66...V6...."A
     188:	00 14 14 14 14 14 00 41 22 14 08 02 01 51 09 06     .......A"....Q..
     198:	32 49 79 41 3e 7e 11 11 11 7e 7f 49 49 49 36 3e     2IyA>~...~.III6>
     1a8:	41 41 41 22 7f 41 41 22 1c 7f 49 49 49 41 7f 09     AAA".AA"..IIIA..
     1b8:	09 09 01 3e 41 49 49 7a 7f 08 08 08 7f 00 41 7f     ...>AIIz......A.
     1c8:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     1d8:	40 7f 02 0c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     1e8:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 46     .....>AQ!^...)FF
     1f8:	49 49 49 31 01 01 7f 01 01 3f 40 40 40 3f 1f 20     III1.....?@@@?. 
     208:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 07 08 70     @ .?@8@?c...c..p
     218:	08 07 61 51 49 45 43 00 7f 41 41 00 02 04 08 10     ..aQIEC..AA.....
     228:	20 00 41 41 7f 00 04 02 01 02 04 40 40 40 40 40      .AA.......@@@@@
     238:	00 01 02 04 00 20 54 54 54 78 7f 48 44 44 38 38     ..... TTTx.HDD88
     248:	44 44 44 20 38 44 44 48 7f 38 54 54 54 18 08 7e     DDD 8DDH.8TTT..~
     258:	09 01 02 0c 52 52 52 3e 7f 08 04 04 78 00 44 7d     ....RRR>....x.D}
     268:	40 00 20 40 44 3d 00 7f 10 28 44 00 00 41 7f 40     @. @D=...(D..A.@
     278:	00 7c 04 18 04 78 7c 08 04 04 78 38 44 44 44 38     .|...x|...x8DDD8
     288:	7c 14 14 14 08 08 14 14 18 7c 7c 08 04 04 08 48     |........||....H
     298:	54 54 54 20 04 3f 44 40 20 3c 40 40 20 7c 1c 20     TTT .?D@ <@@ |. 
     2a8:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 0c 50 50     @ .<@0@<D(.(D.PP
     2b8:	50 3c 44 64 54 4c 44 00 08 36 41 00 00 00 7f 00     P<DdTLD..6A.....
     2c8:	00 00 41 36 08 00 10 08 08 10 08 00 00 00 00 00     ..A6............

000002d8 <__ctors_end>:
     2d8:	11 24       	eor	r1, r1
     2da:	1f be       	out	0x3f, r1	; 63
     2dc:	cf ef       	ldi	r28, 0xFF	; 255
     2de:	d8 e0       	ldi	r29, 0x08	; 8
     2e0:	de bf       	out	0x3e, r29	; 62
     2e2:	cd bf       	out	0x3d, r28	; 61

000002e4 <__do_copy_data>:
     2e4:	11 e0       	ldi	r17, 0x01	; 1
     2e6:	a0 e0       	ldi	r26, 0x00	; 0
     2e8:	b1 e0       	ldi	r27, 0x01	; 1
     2ea:	ea e2       	ldi	r30, 0x2A	; 42
     2ec:	f2 e1       	ldi	r31, 0x12	; 18
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <__do_copy_data+0x10>
     2f0:	05 90       	lpm	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	aa 3a       	cpi	r26, 0xAA	; 170
     2f6:	b1 07       	cpc	r27, r17
     2f8:	d9 f7       	brne	.-10     	; 0x2f0 <__do_copy_data+0xc>

000002fa <__do_clear_bss>:
     2fa:	23 e0       	ldi	r18, 0x03	; 3
     2fc:	aa ea       	ldi	r26, 0xAA	; 170
     2fe:	b1 e0       	ldi	r27, 0x01	; 1
     300:	01 c0       	rjmp	.+2      	; 0x304 <.do_clear_bss_start>

00000302 <.do_clear_bss_loop>:
     302:	1d 92       	st	X+, r1

00000304 <.do_clear_bss_start>:
     304:	ac 3a       	cpi	r26, 0xAC	; 172
     306:	b2 07       	cpc	r27, r18
     308:	e1 f7       	brne	.-8      	; 0x302 <.do_clear_bss_loop>
     30a:	0e 94 2b 05 	call	0xa56	; 0xa56 <main>
     30e:	0c 94 13 09 	jmp	0x1226	; 0x1226 <_exit>

00000312 <__bad_interrupt>:
     312:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000316 <int_to_str>:
char lampQuartos[2] = {'0','0'};
char *garagem = "Fechada";

// Conversão de inteiro para string
void int_to_str(uint16_t s, unsigned char *d)
{
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	ac 01       	movw	r20, r24
     31c:	fb 01       	movw	r30, r22
     31e:	33 96       	adiw	r30, 0x03	; 3
     320:	eb 01       	movw	r28, r22
	uint8_t n = tam_vetor - 2;

	for (int8_t i = n; i >= 0; i--)
	{
		d[i]=s%10+48;
     322:	9a 01       	movw	r18, r20
     324:	ad ec       	ldi	r26, 0xCD	; 205
     326:	bc ec       	ldi	r27, 0xCC	; 204
     328:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__umulhisi3>
     32c:	96 95       	lsr	r25
     32e:	87 95       	ror	r24
     330:	96 95       	lsr	r25
     332:	87 95       	ror	r24
     334:	96 95       	lsr	r25
     336:	87 95       	ror	r24
     338:	9c 01       	movw	r18, r24
     33a:	22 0f       	add	r18, r18
     33c:	33 1f       	adc	r19, r19
     33e:	88 0f       	add	r24, r24
     340:	99 1f       	adc	r25, r25
     342:	88 0f       	add	r24, r24
     344:	99 1f       	adc	r25, r25
     346:	88 0f       	add	r24, r24
     348:	99 1f       	adc	r25, r25
     34a:	82 0f       	add	r24, r18
     34c:	93 1f       	adc	r25, r19
     34e:	9a 01       	movw	r18, r20
     350:	28 1b       	sub	r18, r24
     352:	39 0b       	sbc	r19, r25
     354:	c9 01       	movw	r24, r18
     356:	80 5d       	subi	r24, 0xD0	; 208
     358:	82 93       	st	-Z, r24
		s/=10;
     35a:	9a 01       	movw	r18, r20
     35c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <__umulhisi3>
     360:	ac 01       	movw	r20, r24
     362:	56 95       	lsr	r21
     364:	47 95       	ror	r20
     366:	56 95       	lsr	r21
     368:	47 95       	ror	r20
     36a:	56 95       	lsr	r21
     36c:	47 95       	ror	r20
// Conversão de inteiro para string
void int_to_str(uint16_t s, unsigned char *d)
{
	uint8_t n = tam_vetor - 2;

	for (int8_t i = n; i >= 0; i--)
     36e:	ec 17       	cp	r30, r28
     370:	fd 07       	cpc	r31, r29
     372:	b9 f6       	brne	.-82     	; 0x322 <int_to_str+0xc>
	{
		d[i]=s%10+48;
		s/=10;
	}
}
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <atualiza_lcd>:

// Mostra todos os valores dos componentes da Casa
void atualiza_lcd()
{
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
	nokia_lcd_clear(); // Limpa o LCD
     37e:	0e 94 1e 06 	call	0xc3c	; 0xc3c <nokia_lcd_clear>
	nokia_lcd_set_cursor(0, 0); // Muda o cursos para a posição 0, 0
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	80 e0       	ldi	r24, 0x00	; 0
     386:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Casa  ",1);
     38a:	61 e0       	ldi	r22, 0x01	; 1
     38c:	88 e0       	ldi	r24, 0x08	; 8
     38e:	91 e0       	ldi	r25, 0x01	; 1
     390:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	int_to_str(temp_ADC, temp_string); //converte a temperatura em string
     394:	68 ea       	ldi	r22, 0xA8	; 168
     396:	73 e0       	ldi	r23, 0x03	; 3
     398:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <temp_ADC>
     39c:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <temp_ADC+0x1>
     3a0:	0e 94 8b 01 	call	0x316	; 0x316 <int_to_str>
	nokia_lcd_write_string((char*)temp_string, 1); //Escreve o valor no buffer do LCD
     3a4:	61 e0       	ldi	r22, 0x01	; 1
     3a6:	88 ea       	ldi	r24, 0xA8	; 168
     3a8:	93 e0       	ldi	r25, 0x03	; 3
     3aa:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	int_to_str(temp_maior, temp_string);
     3ae:	68 ea       	ldi	r22, 0xA8	; 168
     3b0:	73 e0       	ldi	r23, 0x03	; 3
     3b2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
     3b6:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
     3ba:	0e 94 8b 01 	call	0x316	; 0x316 <int_to_str>
	nokia_lcd_write_char('/', 1);
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	8f e2       	ldi	r24, 0x2F	; 47
     3c2:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
	nokia_lcd_write_string((char*)temp_string, 1);
     3c6:	61 e0       	ldi	r22, 0x01	; 1
     3c8:	88 ea       	ldi	r24, 0xA8	; 168
     3ca:	93 e0       	ldi	r25, 0x03	; 3
     3cc:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_write_char('C', 1);
     3d0:	61 e0       	ldi	r22, 0x01	; 1
     3d2:	83 e4       	ldi	r24, 0x43	; 67
     3d4:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
	nokia_lcd_set_cursor(0, 10);
     3d8:	6a e0       	ldi	r22, 0x0A	; 10
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Sala:      ",1);
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	8f e0       	ldi	r24, 0x0F	; 15
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_write_string(lampSala,1);
     3ea:	61 e0       	ldi	r22, 0x01	; 1
     3ec:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lampSala>
     3f0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lampSala+0x1>
     3f4:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 20);
     3f8:	64 e1       	ldi	r22, 0x14	; 20
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Cozinha:   ",1);
     400:	61 e0       	ldi	r22, 0x01	; 1
     402:	8b e1       	ldi	r24, 0x1B	; 27
     404:	91 e0       	ldi	r25, 0x01	; 1
     406:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_write_string(lampCozinha,1);
     40a:	61 e0       	ldi	r22, 0x01	; 1
     40c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lampCozinha>
     410:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <lampCozinha+0x1>
     414:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(0, 30);
     418:	6e e1       	ldi	r22, 0x1E	; 30
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Quartos: ",1);
     420:	61 e0       	ldi	r22, 0x01	; 1
     422:	87 e2       	ldi	r24, 0x27	; 39
     424:	91 e0       	ldi	r25, 0x01	; 1
     426:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_write_char(lampQuartos[0],1);
     42a:	c2 e0       	ldi	r28, 0x02	; 2
     42c:	d1 e0       	ldi	r29, 0x01	; 1
     42e:	61 e0       	ldi	r22, 0x01	; 1
     430:	88 81       	ld	r24, Y
     432:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
	nokia_lcd_write_string(" | ",1);
     436:	61 e0       	ldi	r22, 0x01	; 1
     438:	81 e3       	ldi	r24, 0x31	; 49
     43a:	91 e0       	ldi	r25, 0x01	; 1
     43c:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_write_char(lampQuartos[1],1);
     440:	61 e0       	ldi	r22, 0x01	; 1
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
	nokia_lcd_set_cursor(0, 40);
     448:	68 e2       	ldi	r22, 0x28	; 40
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Gara.: ",1);
     450:	61 e0       	ldi	r22, 0x01	; 1
     452:	85 e3       	ldi	r24, 0x35	; 53
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_write_string(garagem,1);
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     460:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     464:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_render(); // Atualiza a tela do display com o conteúdo do buffer
     468:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	08 95       	ret

00000472 <USART_Init>:

// ||Função para inicialização da USART||
void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr>>8); //Ajusta a taxa de transmissão
     472:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (unsigned char)ubrr;
     476:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0B = (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0); //Habilita o transmissor e o receptor
     47a:	88 e9       	ldi	r24, 0x98	; 152
     47c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
	UCSR0C = (1<<USBS0)|(3<<UCSZ00); //Ajusta o formato do frame: 8 bits de dados e 2 de parada
     480:	8e e0       	ldi	r24, 0x0E	; 14
     482:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
     486:	08 95       	ret

00000488 <__vector_18>:
}

ISR(USART_RX_vect)
{
     488:	1f 92       	push	r1
     48a:	0f 92       	push	r0
     48c:	0f b6       	in	r0, 0x3f	; 63
     48e:	0f 92       	push	r0
     490:	11 24       	eor	r1, r1
     492:	2f 93       	push	r18
     494:	3f 93       	push	r19
     496:	4f 93       	push	r20
     498:	5f 93       	push	r21
     49a:	6f 93       	push	r22
     49c:	7f 93       	push	r23
     49e:	8f 93       	push	r24
     4a0:	9f 93       	push	r25
     4a2:	af 93       	push	r26
     4a4:	bf 93       	push	r27
     4a6:	cf 93       	push	r28
     4a8:	df 93       	push	r29
     4aa:	ef 93       	push	r30
     4ac:	ff 93       	push	r31
	char recebido;
	recebido = UDR0; // UDR0 contém o dado recebido via USART
     4ae:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
	switch (recebido)
     4b2:	86 2f       	mov	r24, r22
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	fc 01       	movw	r30, r24
     4b8:	f0 97       	sbiw	r30, 0x30	; 48
     4ba:	e8 34       	cpi	r30, 0x48	; 72
     4bc:	f1 05       	cpc	r31, r1
     4be:	08 f0       	brcs	.+2      	; 0x4c2 <__vector_18+0x3a>
     4c0:	dd c1       	rjmp	.+954    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
     4c2:	ec 5c       	subi	r30, 0xCC	; 204
     4c4:	ff 4f       	sbci	r31, 0xFF	; 255
     4c6:	0c 94 e4 08 	jmp	0x11c8	; 0x11c8 <__tablejump2__>
	{
		case 'q':
		PORTC |= (1<<PC1);
     4ca:	41 9a       	sbi	0x08, 1	; 8
		lampSala = "ON";
     4cc:	8d e3       	ldi	r24, 0x3D	; 61
     4ce:	91 e0       	ldi	r25, 0x01	; 1
     4d0:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lampSala+0x1>
     4d4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lampSala>
		nokia_lcd_set_cursor(0, 10);
     4d8:	6a e0       	ldi	r22, 0x0A	; 10
     4da:	80 e0       	ldi	r24, 0x00	; 0
     4dc:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("              ",1);
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	80 e4       	ldi	r24, 0x40	; 64
     4e4:	91 e0       	ldi	r25, 0x01	; 1
     4e6:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     4ea:	6a e0       	ldi	r22, 0x0A	; 10
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Sala:      ",1);
     4f2:	61 e0       	ldi	r22, 0x01	; 1
     4f4:	8f e0       	ldi	r24, 0x0F	; 15
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_string(lampSala,1);
     4fc:	61 e0       	ldi	r22, 0x01	; 1
     4fe:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lampSala>
     502:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lampSala+0x1>
     506:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_render();
     50a:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
		break;
     50e:	b6 c1       	rjmp	.+876    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>

		case 'w':
		PORTC &= ~(1<<PC1);
     510:	41 98       	cbi	0x08, 1	; 8
		lampSala = "OFF";
     512:	8f e4       	ldi	r24, 0x4F	; 79
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <lampSala+0x1>
     51a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <lampSala>
		nokia_lcd_set_cursor(0, 10);
     51e:	6a e0       	ldi	r22, 0x0A	; 10
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("              ",1);
     526:	61 e0       	ldi	r22, 0x01	; 1
     528:	80 e4       	ldi	r24, 0x40	; 64
     52a:	91 e0       	ldi	r25, 0x01	; 1
     52c:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 10);
     530:	6a e0       	ldi	r22, 0x0A	; 10
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Sala:      ",1);
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	8f e0       	ldi	r24, 0x0F	; 15
     53c:	91 e0       	ldi	r25, 0x01	; 1
     53e:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_string(lampSala,1);
     542:	61 e0       	ldi	r22, 0x01	; 1
     544:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <lampSala>
     548:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <lampSala+0x1>
     54c:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_render();
     550:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
		break;
     554:	93 c1       	rjmp	.+806    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>

		case 'e':
		PORTC |= (1<<PC2);
     556:	42 9a       	sbi	0x08, 2	; 8
		lampCozinha = "ON";
     558:	8d e3       	ldi	r24, 0x3D	; 61
     55a:	91 e0       	ldi	r25, 0x01	; 1
     55c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <lampCozinha+0x1>
     560:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <lampCozinha>
		nokia_lcd_set_cursor(0, 20);
     564:	64 e1       	ldi	r22, 0x14	; 20
     566:	80 e0       	ldi	r24, 0x00	; 0
     568:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("              ",1);
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	80 e4       	ldi	r24, 0x40	; 64
     570:	91 e0       	ldi	r25, 0x01	; 1
     572:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     576:	64 e1       	ldi	r22, 0x14	; 20
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Cozinha:   ",1);
     57e:	61 e0       	ldi	r22, 0x01	; 1
     580:	8b e1       	ldi	r24, 0x1B	; 27
     582:	91 e0       	ldi	r25, 0x01	; 1
     584:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_string(lampCozinha,1);
     588:	61 e0       	ldi	r22, 0x01	; 1
     58a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lampCozinha>
     58e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <lampCozinha+0x1>
     592:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_render();
     596:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
		break;
     59a:	70 c1       	rjmp	.+736    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>

		case 'r':
		PORTC &= ~(1<<PC2);
     59c:	42 98       	cbi	0x08, 2	; 8
		lampCozinha = "OFF";
     59e:	8f e4       	ldi	r24, 0x4F	; 79
     5a0:	91 e0       	ldi	r25, 0x01	; 1
     5a2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <lampCozinha+0x1>
     5a6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <lampCozinha>
		nokia_lcd_set_cursor(0, 20);
     5aa:	64 e1       	ldi	r22, 0x14	; 20
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("              ",1);
     5b2:	61 e0       	ldi	r22, 0x01	; 1
     5b4:	80 e4       	ldi	r24, 0x40	; 64
     5b6:	91 e0       	ldi	r25, 0x01	; 1
     5b8:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 20);
     5bc:	64 e1       	ldi	r22, 0x14	; 20
     5be:	80 e0       	ldi	r24, 0x00	; 0
     5c0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Cozinha:   ",1);
     5c4:	61 e0       	ldi	r22, 0x01	; 1
     5c6:	8b e1       	ldi	r24, 0x1B	; 27
     5c8:	91 e0       	ldi	r25, 0x01	; 1
     5ca:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_string(lampCozinha,1);
     5ce:	61 e0       	ldi	r22, 0x01	; 1
     5d0:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <lampCozinha>
     5d4:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <lampCozinha+0x1>
     5d8:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_render();
     5dc:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
		break;
     5e0:	4d c1       	rjmp	.+666    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
		case '0': // '0' em int é igual a 48, OCR0A = (48-48)*63.7 = 0
		case '1': // '1' em int é igual a 49, OCR0A = (49-48)*63.7 = 63
		case '2': // '2' em int é igual a 50, OCR0A = (50-48)*63.7 = 127
		case '3': // '3' em int é igual a 51, OCR0A = (51-48)*63.7 = 191
		case '4': // '4' em int é igual a 52, OCR0A = (49-48)*63.7 = 254
		lampQuartos[0] = recebido;
     5e2:	c2 e0       	ldi	r28, 0x02	; 2
     5e4:	d1 e0       	ldi	r29, 0x01	; 1
     5e6:	68 83       	st	Y, r22
		OCR0A = (recebido-48)*63.7;
     5e8:	70 e0       	ldi	r23, 0x00	; 0
     5ea:	60 53       	subi	r22, 0x30	; 48
     5ec:	71 09       	sbc	r23, r1
     5ee:	07 2e       	mov	r0, r23
     5f0:	00 0c       	add	r0, r0
     5f2:	88 0b       	sbc	r24, r24
     5f4:	99 0b       	sbc	r25, r25
     5f6:	0e 94 df 07 	call	0xfbe	; 0xfbe <__floatsisf>
     5fa:	2d ec       	ldi	r18, 0xCD	; 205
     5fc:	3c ec       	ldi	r19, 0xCC	; 204
     5fe:	4e e7       	ldi	r20, 0x7E	; 126
     600:	52 e4       	ldi	r21, 0x42	; 66
     602:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__mulsf3>
     606:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fixunssfsi>
     60a:	67 bd       	out	0x27, r22	; 39
		nokia_lcd_set_cursor(0, 30);
     60c:	6e e1       	ldi	r22, 0x1E	; 30
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("              ",1);
     614:	61 e0       	ldi	r22, 0x01	; 1
     616:	80 e4       	ldi	r24, 0x40	; 64
     618:	91 e0       	ldi	r25, 0x01	; 1
     61a:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     61e:	6e e1       	ldi	r22, 0x1E	; 30
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Quartos: ",1);
     626:	61 e0       	ldi	r22, 0x01	; 1
     628:	87 e2       	ldi	r24, 0x27	; 39
     62a:	91 e0       	ldi	r25, 0x01	; 1
     62c:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_char(lampQuartos[0],1);
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	88 81       	ld	r24, Y
     634:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
		nokia_lcd_write_string(" | ",1);
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	81 e3       	ldi	r24, 0x31	; 49
     63c:	91 e0       	ldi	r25, 0x01	; 1
     63e:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_char(lampQuartos[1],1);
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
		nokia_lcd_render();
     64a:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
		break;
     64e:	16 c1       	rjmp	.+556    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
		case '5': // '5' em int é igual a 53, OCR0B = (53-53)*63.7 = 0
		case '6': // '6' em int é igual a 54, OCR0B = (54-53)*63.7 = 63
		case '7': // '7' em int é igual a 55, OCR0B = (55-53)*63.7 = 127
		case '8': // '8' em int é igual a 56, OCR0B = (56-53)*63.7 = 191
		case '9': // '0' em int é igual a 56, OCR0B = (57-53)*63.7 = 254
		lampQuartos[1] = recebido-5;
     650:	c2 e0       	ldi	r28, 0x02	; 2
     652:	d1 e0       	ldi	r29, 0x01	; 1
     654:	8b ef       	ldi	r24, 0xFB	; 251
     656:	86 0f       	add	r24, r22
     658:	89 83       	std	Y+1, r24	; 0x01
		OCR0B = (recebido-53)*63.7;
     65a:	70 e0       	ldi	r23, 0x00	; 0
     65c:	65 53       	subi	r22, 0x35	; 53
     65e:	71 09       	sbc	r23, r1
     660:	07 2e       	mov	r0, r23
     662:	00 0c       	add	r0, r0
     664:	88 0b       	sbc	r24, r24
     666:	99 0b       	sbc	r25, r25
     668:	0e 94 df 07 	call	0xfbe	; 0xfbe <__floatsisf>
     66c:	2d ec       	ldi	r18, 0xCD	; 205
     66e:	3c ec       	ldi	r19, 0xCC	; 204
     670:	4e e7       	ldi	r20, 0x7E	; 126
     672:	52 e4       	ldi	r21, 0x42	; 66
     674:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__mulsf3>
     678:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fixunssfsi>
     67c:	68 bd       	out	0x28, r22	; 40
		nokia_lcd_set_cursor(0, 30);
     67e:	6e e1       	ldi	r22, 0x1E	; 30
     680:	80 e0       	ldi	r24, 0x00	; 0
     682:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("              ",1);
     686:	61 e0       	ldi	r22, 0x01	; 1
     688:	80 e4       	ldi	r24, 0x40	; 64
     68a:	91 e0       	ldi	r25, 0x01	; 1
     68c:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 30);
     690:	6e e1       	ldi	r22, 0x1E	; 30
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Quartos: ",1);
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	87 e2       	ldi	r24, 0x27	; 39
     69c:	91 e0       	ldi	r25, 0x01	; 1
     69e:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_char(lampQuartos[0],1);
     6a2:	61 e0       	ldi	r22, 0x01	; 1
     6a4:	88 81       	ld	r24, Y
     6a6:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
		nokia_lcd_write_string(" | ",1);
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	81 e3       	ldi	r24, 0x31	; 49
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_char(lampQuartos[1],1);
     6b4:	61 e0       	ldi	r22, 0x01	; 1
     6b6:	89 81       	ldd	r24, Y+1	; 0x01
     6b8:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
		nokia_lcd_render();
     6bc:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
		break;
     6c0:	dd c0       	rjmp	.+442    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>

		case 'a':
		garagem = "Abrindo";
     6c2:	83 e5       	ldi	r24, 0x53	; 83
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6ca:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		nokia_lcd_set_cursor(0, 40);
     6ce:	68 e2       	ldi	r22, 0x28	; 40
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("              ",1);
     6d6:	61 e0       	ldi	r22, 0x01	; 1
     6d8:	80 e4       	ldi	r24, 0x40	; 64
     6da:	91 e0       	ldi	r25, 0x01	; 1
     6dc:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     6e0:	68 e2       	ldi	r22, 0x28	; 40
     6e2:	80 e0       	ldi	r24, 0x00	; 0
     6e4:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Gara.: ",1);
     6e8:	61 e0       	ldi	r22, 0x01	; 1
     6ea:	85 e3       	ldi	r24, 0x35	; 53
     6ec:	91 e0       	ldi	r25, 0x01	; 1
     6ee:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_string(garagem,1);
     6f2:	61 e0       	ldi	r22, 0x01	; 1
     6f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     6f8:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     6fc:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_render();
     700:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
		// Gira o motor no sentido horario, abrindo o portão
		for (uint8_t j = 0, i = 3; j < 64; j++)
		{
			PORTC = (1<<i)|(PORTC&0b00000110);
     704:	88 b1       	in	r24, 0x08	; 8
     706:	86 70       	andi	r24, 0x06	; 6
     708:	88 60       	ori	r24, 0x08	; 8
     70a:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70c:	2f e7       	ldi	r18, 0x7F	; 127
     70e:	38 e3       	ldi	r19, 0x38	; 56
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	21 50       	subi	r18, 0x01	; 1
     714:	30 40       	sbci	r19, 0x00	; 0
     716:	80 40       	sbci	r24, 0x00	; 0
     718:	e1 f7       	brne	.-8      	; 0x712 <__vector_18+0x28a>
     71a:	00 c0       	rjmp	.+0      	; 0x71c <__vector_18+0x294>
     71c:	00 00       	nop
     71e:	40 e4       	ldi	r20, 0x40	; 64
			i++;
     720:	84 e0       	ldi	r24, 0x04	; 4
		nokia_lcd_write_string(garagem,1);
		nokia_lcd_render();
		// Gira o motor no sentido horario, abrindo o portão
		for (uint8_t j = 0, i = 3; j < 64; j++)
		{
			PORTC = (1<<i)|(PORTC&0b00000110);
     722:	61 e0       	ldi	r22, 0x01	; 1
     724:	70 e0       	ldi	r23, 0x00	; 0
     726:	18 c0       	rjmp	.+48     	; 0x758 <__vector_18+0x2d0>
     728:	98 b1       	in	r25, 0x08	; 8
     72a:	9b 01       	movw	r18, r22
     72c:	08 2e       	mov	r0, r24
     72e:	02 c0       	rjmp	.+4      	; 0x734 <__vector_18+0x2ac>
     730:	22 0f       	add	r18, r18
     732:	33 1f       	adc	r19, r19
     734:	0a 94       	dec	r0
     736:	e2 f7       	brpl	.-8      	; 0x730 <__vector_18+0x2a8>
     738:	96 70       	andi	r25, 0x06	; 6
     73a:	29 2b       	or	r18, r25
     73c:	28 b9       	out	0x08, r18	; 8
			i++;
     73e:	8f 5f       	subi	r24, 0xFF	; 255
     740:	9f e7       	ldi	r25, 0x7F	; 127
     742:	28 e3       	ldi	r18, 0x38	; 56
     744:	31 e0       	ldi	r19, 0x01	; 1
     746:	91 50       	subi	r25, 0x01	; 1
     748:	20 40       	sbci	r18, 0x00	; 0
     74a:	30 40       	sbci	r19, 0x00	; 0
     74c:	e1 f7       	brne	.-8      	; 0x746 <__vector_18+0x2be>
     74e:	00 c0       	rjmp	.+0      	; 0x750 <__vector_18+0x2c8>
     750:	00 00       	nop
			_delay_ms(50);
			if(i == 7) i = 3;
     752:	87 30       	cpi	r24, 0x07	; 7
     754:	09 f4       	brne	.+2      	; 0x758 <__vector_18+0x2d0>
     756:	83 e0       	ldi	r24, 0x03	; 3
     758:	41 50       	subi	r20, 0x01	; 1
		nokia_lcd_set_cursor(0, 40);
		nokia_lcd_write_string("Gara.: ",1);
		nokia_lcd_write_string(garagem,1);
		nokia_lcd_render();
		// Gira o motor no sentido horario, abrindo o portão
		for (uint8_t j = 0, i = 3; j < 64; j++)
     75a:	31 f7       	brne	.-52     	; 0x728 <__vector_18+0x2a0>
			i++;
			_delay_ms(50);
			if(i == 7) i = 3;
		}

		garagem = "Aberta";
     75c:	8b e5       	ldi	r24, 0x5B	; 91
     75e:	91 e0       	ldi	r25, 0x01	; 1
     760:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     764:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		nokia_lcd_set_cursor(0, 40);
     768:	68 e2       	ldi	r22, 0x28	; 40
     76a:	80 e0       	ldi	r24, 0x00	; 0
     76c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("              ",1);
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	80 e4       	ldi	r24, 0x40	; 64
     774:	91 e0       	ldi	r25, 0x01	; 1
     776:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     77a:	68 e2       	ldi	r22, 0x28	; 40
     77c:	80 e0       	ldi	r24, 0x00	; 0
     77e:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Gara.: ",1);
     782:	61 e0       	ldi	r22, 0x01	; 1
     784:	85 e3       	ldi	r24, 0x35	; 53
     786:	91 e0       	ldi	r25, 0x01	; 1
     788:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_string(garagem,1);
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     792:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     796:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_render();
     79a:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
		break;
     79e:	6e c0       	rjmp	.+220    	; 0x87c <__DATA_REGION_LENGTH__+0x7c>

		case 's':
		garagem = "Fechan.";
     7a0:	82 e6       	ldi	r24, 0x62	; 98
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		nokia_lcd_set_cursor(0, 40);
     7ac:	68 e2       	ldi	r22, 0x28	; 40
     7ae:	80 e0       	ldi	r24, 0x00	; 0
     7b0:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("              ",1);
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	80 e4       	ldi	r24, 0x40	; 64
     7b8:	91 e0       	ldi	r25, 0x01	; 1
     7ba:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     7be:	68 e2       	ldi	r22, 0x28	; 40
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Gara.: ",1);
     7c6:	61 e0       	ldi	r22, 0x01	; 1
     7c8:	85 e3       	ldi	r24, 0x35	; 53
     7ca:	91 e0       	ldi	r25, 0x01	; 1
     7cc:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_string(garagem,1);
     7d0:	61 e0       	ldi	r22, 0x01	; 1
     7d2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     7d6:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     7da:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_render();
     7de:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
		// Gira o motor no sentido anti-horario, fechando o portão
		for (uint8_t j = 0, i = 6; j < 64; j++)
		{
			PORTC = (1<<i)|(PORTC&0b00000110);
     7e2:	88 b1       	in	r24, 0x08	; 8
     7e4:	86 70       	andi	r24, 0x06	; 6
     7e6:	80 64       	ori	r24, 0x40	; 64
     7e8:	88 b9       	out	0x08, r24	; 8
     7ea:	8f e7       	ldi	r24, 0x7F	; 127
     7ec:	98 e3       	ldi	r25, 0x38	; 56
     7ee:	21 e0       	ldi	r18, 0x01	; 1
     7f0:	81 50       	subi	r24, 0x01	; 1
     7f2:	90 40       	sbci	r25, 0x00	; 0
     7f4:	20 40       	sbci	r18, 0x00	; 0
     7f6:	e1 f7       	brne	.-8      	; 0x7f0 <__vector_18+0x368>
     7f8:	00 c0       	rjmp	.+0      	; 0x7fa <__vector_18+0x372>
     7fa:	00 00       	nop
     7fc:	40 e4       	ldi	r20, 0x40	; 64
			i--;
     7fe:	85 e0       	ldi	r24, 0x05	; 5
		nokia_lcd_write_string(garagem,1);
		nokia_lcd_render();
		// Gira o motor no sentido anti-horario, fechando o portão
		for (uint8_t j = 0, i = 6; j < 64; j++)
		{
			PORTC = (1<<i)|(PORTC&0b00000110);
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	70 e0       	ldi	r23, 0x00	; 0
     804:	18 c0       	rjmp	.+48     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     806:	98 b1       	in	r25, 0x08	; 8
     808:	9b 01       	movw	r18, r22
     80a:	08 2e       	mov	r0, r24
     80c:	02 c0       	rjmp	.+4      	; 0x812 <__DATA_REGION_LENGTH__+0x12>
     80e:	22 0f       	add	r18, r18
     810:	33 1f       	adc	r19, r19
     812:	0a 94       	dec	r0
     814:	e2 f7       	brpl	.-8      	; 0x80e <__DATA_REGION_LENGTH__+0xe>
     816:	96 70       	andi	r25, 0x06	; 6
     818:	29 2b       	or	r18, r25
     81a:	28 b9       	out	0x08, r18	; 8
			i--;
     81c:	81 50       	subi	r24, 0x01	; 1
     81e:	3f e7       	ldi	r19, 0x7F	; 127
     820:	98 e3       	ldi	r25, 0x38	; 56
     822:	21 e0       	ldi	r18, 0x01	; 1
     824:	31 50       	subi	r19, 0x01	; 1
     826:	90 40       	sbci	r25, 0x00	; 0
     828:	20 40       	sbci	r18, 0x00	; 0
     82a:	e1 f7       	brne	.-8      	; 0x824 <__DATA_REGION_LENGTH__+0x24>
     82c:	00 c0       	rjmp	.+0      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     82e:	00 00       	nop
			_delay_ms(50);
			if(i == 2) i = 6;
     830:	82 30       	cpi	r24, 0x02	; 2
     832:	09 f4       	brne	.+2      	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     834:	86 e0       	ldi	r24, 0x06	; 6
     836:	41 50       	subi	r20, 0x01	; 1
		nokia_lcd_set_cursor(0, 40);
		nokia_lcd_write_string("Gara.: ",1);
		nokia_lcd_write_string(garagem,1);
		nokia_lcd_render();
		// Gira o motor no sentido anti-horario, fechando o portão
		for (uint8_t j = 0, i = 6; j < 64; j++)
     838:	31 f7       	brne	.-52     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
			i--;
			_delay_ms(50);
			if(i == 2) i = 6;
		}

		garagem = "Fechada";
     83a:	8a e6       	ldi	r24, 0x6A	; 106
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     842:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		nokia_lcd_set_cursor(0, 40);
     846:	68 e2       	ldi	r22, 0x28	; 40
     848:	80 e0       	ldi	r24, 0x00	; 0
     84a:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("              ",1);
     84e:	61 e0       	ldi	r22, 0x01	; 1
     850:	80 e4       	ldi	r24, 0x40	; 64
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_set_cursor(0, 40);
     858:	68 e2       	ldi	r22, 0x28	; 40
     85a:	80 e0       	ldi	r24, 0x00	; 0
     85c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
		nokia_lcd_write_string("Gara.: ",1);
     860:	61 e0       	ldi	r22, 0x01	; 1
     862:	85 e3       	ldi	r24, 0x35	; 53
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_write_string(garagem,1);
     86a:	61 e0       	ldi	r22, 0x01	; 1
     86c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     870:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     874:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
		nokia_lcd_render();
     878:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
		break;
	}
}
     87c:	ff 91       	pop	r31
     87e:	ef 91       	pop	r30
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	bf 91       	pop	r27
     886:	af 91       	pop	r26
     888:	9f 91       	pop	r25
     88a:	8f 91       	pop	r24
     88c:	7f 91       	pop	r23
     88e:	6f 91       	pop	r22
     890:	5f 91       	pop	r21
     892:	4f 91       	pop	r20
     894:	3f 91       	pop	r19
     896:	2f 91       	pop	r18
     898:	0f 90       	pop	r0
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	0f 90       	pop	r0
     89e:	1f 90       	pop	r1
     8a0:	18 95       	reti

000008a2 <alarme_sonoro>:
// Função que gera um onda quadrada de T = 1 ms (f = 1 khz) no pino PB0 por 3000ms = 3s
void alarme_sonoro()
{
     8a2:	88 eb       	ldi	r24, 0xB8	; 184
     8a4:	9b e0       	ldi	r25, 0x0B	; 11
	for(int16_t i = 0; i < 3000; i++)
	{
		PORTB |= (1 << PB0);
     8a6:	28 9a       	sbi	0x05, 0	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8a8:	e7 ee       	ldi	r30, 0xE7	; 231
     8aa:	f3 e0       	ldi	r31, 0x03	; 3
     8ac:	31 97       	sbiw	r30, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <alarme_sonoro+0xa>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <alarme_sonoro+0x10>
     8b2:	00 00       	nop
		_delay_us(500);
		PORTB &= ~(1 << PB0);
     8b4:	28 98       	cbi	0x05, 0	; 5
     8b6:	e7 ee       	ldi	r30, 0xE7	; 231
     8b8:	f3 e0       	ldi	r31, 0x03	; 3
     8ba:	31 97       	sbiw	r30, 0x01	; 1
     8bc:	f1 f7       	brne	.-4      	; 0x8ba <alarme_sonoro+0x18>
     8be:	00 c0       	rjmp	.+0      	; 0x8c0 <alarme_sonoro+0x1e>
     8c0:	00 00       	nop
     8c2:	01 97       	sbiw	r24, 0x01	; 1
	}
}
// Função que gera um onda quadrada de T = 1 ms (f = 1 khz) no pino PB0 por 3000ms = 3s
void alarme_sonoro()
{
	for(int16_t i = 0; i < 3000; i++)
     8c4:	81 f7       	brne	.-32     	; 0x8a6 <alarme_sonoro+0x4>
		PORTB |= (1 << PB0);
		_delay_us(500);
		PORTB &= ~(1 << PB0);
		_delay_us(500);
	}
}
     8c6:	08 95       	ret

000008c8 <__vector_1>:

ISR(INT0_vect) // Alarme sensor de presença Terraço
{
     8c8:	1f 92       	push	r1
     8ca:	0f 92       	push	r0
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	0f 92       	push	r0
     8d0:	11 24       	eor	r1, r1
     8d2:	2f 93       	push	r18
     8d4:	3f 93       	push	r19
     8d6:	4f 93       	push	r20
     8d8:	5f 93       	push	r21
     8da:	6f 93       	push	r22
     8dc:	7f 93       	push	r23
     8de:	8f 93       	push	r24
     8e0:	9f 93       	push	r25
     8e2:	af 93       	push	r26
     8e4:	bf 93       	push	r27
     8e6:	ef 93       	push	r30
     8e8:	ff 93       	push	r31
	nokia_lcd_clear();
     8ea:	0e 94 1e 06 	call	0xc3c	; 0xc3c <nokia_lcd_clear>
	nokia_lcd_set_cursor(10, 10);
     8ee:	6a e0       	ldi	r22, 0x0A	; 10
     8f0:	8a e0       	ldi	r24, 0x0A	; 10
     8f2:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
	nokia_lcd_set_cursor(0, 10);
     8f6:	6a e0       	ldi	r22, 0x0A	; 10
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("ALARME!", 2);
     8fe:	62 e0       	ldi	r22, 0x02	; 2
     900:	82 e7       	ldi	r24, 0x72	; 114
     902:	91 e0       	ldi	r25, 0x01	; 1
     904:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(20, 30);
     908:	6e e1       	ldi	r22, 0x1E	; 30
     90a:	84 e1       	ldi	r24, 0x14	; 20
     90c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Terraco", 1);
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	8a e7       	ldi	r24, 0x7A	; 122
     914:	91 e0       	ldi	r25, 0x01	; 1
     916:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_render();
     91a:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>

	alarme_sonoro();
     91e:	0e 94 51 04 	call	0x8a2	; 0x8a2 <alarme_sonoro>

	atualiza_lcd();
     922:	0e 94 bd 01 	call	0x37a	; 0x37a <atualiza_lcd>
}
     926:	ff 91       	pop	r31
     928:	ef 91       	pop	r30
     92a:	bf 91       	pop	r27
     92c:	af 91       	pop	r26
     92e:	9f 91       	pop	r25
     930:	8f 91       	pop	r24
     932:	7f 91       	pop	r23
     934:	6f 91       	pop	r22
     936:	5f 91       	pop	r21
     938:	4f 91       	pop	r20
     93a:	3f 91       	pop	r19
     93c:	2f 91       	pop	r18
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <__vector_2>:

ISR(INT1_vect) // Alarme sensor de presença Casa
{
     948:	1f 92       	push	r1
     94a:	0f 92       	push	r0
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	0f 92       	push	r0
     950:	11 24       	eor	r1, r1
     952:	2f 93       	push	r18
     954:	3f 93       	push	r19
     956:	4f 93       	push	r20
     958:	5f 93       	push	r21
     95a:	6f 93       	push	r22
     95c:	7f 93       	push	r23
     95e:	8f 93       	push	r24
     960:	9f 93       	push	r25
     962:	af 93       	push	r26
     964:	bf 93       	push	r27
     966:	ef 93       	push	r30
     968:	ff 93       	push	r31
	nokia_lcd_clear();
     96a:	0e 94 1e 06 	call	0xc3c	; 0xc3c <nokia_lcd_clear>
	nokia_lcd_set_cursor(0, 10);
     96e:	6a e0       	ldi	r22, 0x0A	; 10
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("ALARME!", 2);
     976:	62 e0       	ldi	r22, 0x02	; 2
     978:	82 e7       	ldi	r24, 0x72	; 114
     97a:	91 e0       	ldi	r25, 0x01	; 1
     97c:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_set_cursor(30, 30);
     980:	6e e1       	ldi	r22, 0x1E	; 30
     982:	8e e1       	ldi	r24, 0x1E	; 30
     984:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
	nokia_lcd_write_string("Casa", 1);
     988:	61 e0       	ldi	r22, 0x01	; 1
     98a:	82 e8       	ldi	r24, 0x82	; 130
     98c:	91 e0       	ldi	r25, 0x01	; 1
     98e:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
	nokia_lcd_render();
     992:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>

	alarme_sonoro(); // Chama função que gera a onda quadrada
     996:	0e 94 51 04 	call	0x8a2	; 0x8a2 <alarme_sonoro>

	atualiza_lcd(); // Chama função que atualiza os valores do LCD
     99a:	0e 94 bd 01 	call	0x37a	; 0x37a <atualiza_lcd>
}
     99e:	ff 91       	pop	r31
     9a0:	ef 91       	pop	r30
     9a2:	bf 91       	pop	r27
     9a4:	af 91       	pop	r26
     9a6:	9f 91       	pop	r25
     9a8:	8f 91       	pop	r24
     9aa:	7f 91       	pop	r23
     9ac:	6f 91       	pop	r22
     9ae:	5f 91       	pop	r21
     9b0:	4f 91       	pop	r20
     9b2:	3f 91       	pop	r19
     9b4:	2f 91       	pop	r18
     9b6:	0f 90       	pop	r0
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	0f 90       	pop	r0
     9bc:	1f 90       	pop	r1
     9be:	18 95       	reti

000009c0 <__vector_21>:

ISR(ADC_vect)
{
     9c0:	1f 92       	push	r1
     9c2:	0f 92       	push	r0
     9c4:	0f b6       	in	r0, 0x3f	; 63
     9c6:	0f 92       	push	r0
     9c8:	11 24       	eor	r1, r1
     9ca:	2f 93       	push	r18
     9cc:	3f 93       	push	r19
     9ce:	4f 93       	push	r20
     9d0:	5f 93       	push	r21
     9d2:	6f 93       	push	r22
     9d4:	7f 93       	push	r23
     9d6:	8f 93       	push	r24
     9d8:	9f 93       	push	r25
     9da:	af 93       	push	r26
     9dc:	bf 93       	push	r27
     9de:	ef 93       	push	r30
     9e0:	ff 93       	push	r31
	temp_ADC = ((ADC/1023.0)*500); // 10mV/°C
     9e2:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
     9e6:	70 91 79 00 	lds	r23, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
     9ea:	80 e0       	ldi	r24, 0x00	; 0
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	0e 94 dd 07 	call	0xfba	; 0xfba <__floatunsisf>
     9f2:	20 e0       	ldi	r18, 0x00	; 0
     9f4:	30 ec       	ldi	r19, 0xC0	; 192
     9f6:	4f e7       	ldi	r20, 0x7F	; 127
     9f8:	54 e4       	ldi	r21, 0x44	; 68
     9fa:	0e 94 3c 07 	call	0xe78	; 0xe78 <__divsf3>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	4a ef       	ldi	r20, 0xFA	; 250
     a04:	53 e4       	ldi	r21, 0x43	; 67
     a06:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <__mulsf3>
     a0a:	0e 94 ae 07 	call	0xf5c	; 0xf5c <__fixunssfsi>
     a0e:	70 93 ad 01 	sts	0x01AD, r23	; 0x8001ad <temp_ADC+0x1>
     a12:	60 93 ac 01 	sts	0x01AC, r22	; 0x8001ac <temp_ADC>

	if (temp_ADC > temp_maior)
     a16:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <__data_end>
     a1a:	30 91 ab 01 	lds	r19, 0x01AB	; 0x8001ab <__data_end+0x1>
     a1e:	26 17       	cp	r18, r22
     a20:	37 07       	cpc	r19, r23
     a22:	40 f4       	brcc	.+16     	; 0xa34 <__vector_21+0x74>
	{
		temp_maior = temp_ADC;
     a24:	70 93 ab 01 	sts	0x01AB, r23	; 0x8001ab <__data_end+0x1>
     a28:	60 93 aa 01 	sts	0x01AA, r22	; 0x8001aa <__data_end>
		eeprom_update_byte((uint8_t *)0, temp_maior);  // Salva a maior temperatura lida no endereço 0 da EEPROM
     a2c:	80 e0       	ldi	r24, 0x00	; 0
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	0e 94 01 09 	call	0x1202	; 0x1202 <eeprom_update_byte>
	}
}
     a34:	ff 91       	pop	r31
     a36:	ef 91       	pop	r30
     a38:	bf 91       	pop	r27
     a3a:	af 91       	pop	r26
     a3c:	9f 91       	pop	r25
     a3e:	8f 91       	pop	r24
     a40:	7f 91       	pop	r23
     a42:	6f 91       	pop	r22
     a44:	5f 91       	pop	r21
     a46:	4f 91       	pop	r20
     a48:	3f 91       	pop	r19
     a4a:	2f 91       	pop	r18
     a4c:	0f 90       	pop	r0
     a4e:	0f be       	out	0x3f, r0	; 63
     a50:	0f 90       	pop	r0
     a52:	1f 90       	pop	r1
     a54:	18 95       	reti

00000a56 <main>:

int main()
{
	// GPIO
	DDRC = 0b1111110; // Pinos da porta C de PC1-PC6 como saída
     a56:	8e e7       	ldi	r24, 0x7E	; 126
     a58:	87 b9       	out	0x07, r24	; 7
	DDRD = 0b01110000; // Pinos da porta D de PD4-PD6 como saída
     a5a:	80 e7       	ldi	r24, 0x70	; 112
     a5c:	8a b9       	out	0x0a, r24	; 10
	DDRB = 0b00111111; // Pinos da porta B de PB0-PB5 como saída
     a5e:	8f e3       	ldi	r24, 0x3F	; 63
     a60:	84 b9       	out	0x04, r24	; 4
	PORTD = 0b00001100; // habilita pull-ups nos pinos PD2 e PD3
     a62:	8c e0       	ldi	r24, 0x0C	; 12
     a64:	8b b9       	out	0x0b, r24	; 11

	USART_Init(MYUBRR);
     a66:	83 e3       	ldi	r24, 0x33	; 51
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	0e 94 39 02 	call	0x472	; 0x472 <USART_Init>

	// Fast PWM, TOP = 0xFF, OC0A e OC0B habilitados
	TCCR0A = 0b10100011; // PWM não invertido nos pinos OC0A e OC0B
     a6e:	83 ea       	ldi	r24, 0xA3	; 163
     a70:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0b00000101; // liga TC0, prescaler = 1024, fpwm = f0sc/(256*prescaler) = 16MHz/(256*1024) = 61Hz
     a72:	85 e0       	ldi	r24, 0x05	; 5
     a74:	85 bd       	out	0x25, r24	; 37

	EICRA = 0b00001010; // interrupção externa INT0 e INT1 na borda de descida
     a76:	8a e0       	ldi	r24, 0x0A	; 10
     a78:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
	EIMSK = 0b00000011; // habilita a interrupção externa INT0 e INT1
     a7c:	83 e0       	ldi	r24, 0x03	; 3
     a7e:	8d bb       	out	0x1d, r24	; 29

	ADMUX = 0b01000000; // AVCC (5V), canal 0
     a80:	80 e4       	ldi	r24, 0x40	; 64
     a82:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	ADCSRA = 0b11101111; // habilita o AD, habilita interrupção, modo de conversão contínua, prescaler = 128
     a86:	8f ee       	ldi	r24, 0xEF	; 239
     a88:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
	ADCSRB = 0x00; // modo de conversão contínua
     a8c:	10 92 7b 00 	sts	0x007B, r1	; 0x80007b <__TEXT_REGION_LENGTH__+0x7f807b>
	DIDR0 = 0b00111110; // habilita pino PC0 como entrada do ADC0
     a90:	8e e3       	ldi	r24, 0x3E	; 62
     a92:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__TEXT_REGION_LENGTH__+0x7f807e>

	nokia_lcd_init(); // Inicia o LCD
     a96:	0e 94 dd 05 	call	0xbba	; 0xbba <nokia_lcd_init>

	sei(); // habilita interrupções globais, ativando o bit I do SREG
     a9a:	78 94       	sei

	atualiza_lcd(); // Chama função que atualiza os valores do LCD
     a9c:	0e 94 bd 01 	call	0x37a	; 0x37a <atualiza_lcd>

	temp_maior = eeprom_read_byte ((const uint8_t*)0); // Ler o valor do endereço 0 da EEPROM
     aa0:	80 e0       	ldi	r24, 0x00	; 0
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <eeprom_read_byte>
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	90 93 ab 01 	sts	0x01AB, r25	; 0x8001ab <__data_end+0x1>
     aae:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <__data_end>
	
	while(1)
	{
		if(temp_ADC >= 70) // Se a temperutura da casa for maior que 70°C, liga o alarme sonoro e mostra um aviso
     ab2:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <temp_ADC>
     ab6:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <temp_ADC+0x1>
     aba:	86 34       	cpi	r24, 0x46	; 70
     abc:	91 05       	cpc	r25, r1
     abe:	d8 f0       	brcs	.+54     	; 0xaf6 <main+0xa0>
		{
			nokia_lcd_clear();
     ac0:	0e 94 1e 06 	call	0xc3c	; 0xc3c <nokia_lcd_clear>
			nokia_lcd_set_cursor(0, 0);
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	80 e0       	ldi	r24, 0x00	; 0
     ac8:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Perigo!", 2);
     acc:	62 e0       	ldi	r22, 0x02	; 2
     ace:	87 e8       	ldi	r24, 0x87	; 135
     ad0:	91 e0       	ldi	r25, 0x01	; 1
     ad2:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 20);
     ad6:	64 e1       	ldi	r22, 0x14	; 20
     ad8:	80 e0       	ldi	r24, 0x00	; 0
     ada:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Temperatura   interna alta", 1);
     ade:	61 e0       	ldi	r22, 0x01	; 1
     ae0:	8f e8       	ldi	r24, 0x8F	; 143
     ae2:	91 e0       	ldi	r25, 0x01	; 1
     ae4:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
			nokia_lcd_render();
     ae8:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>

			alarme_sonoro(); // Chama função que gera a onda quadrada
     aec:	0e 94 51 04 	call	0x8a2	; 0x8a2 <alarme_sonoro>

			atualiza_lcd(); // Chama função que atualiza os valores do LCD
     af0:	0e 94 bd 01 	call	0x37a	; 0x37a <atualiza_lcd>
     af4:	de cf       	rjmp	.-68     	; 0xab2 <main+0x5c>
		}

		else
		{
			nokia_lcd_set_cursor(0, 0);
     af6:	60 e0       	ldi	r22, 0x00	; 0
     af8:	80 e0       	ldi	r24, 0x00	; 0
     afa:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
			nokia_lcd_write_string("              ",1);
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	80 e4       	ldi	r24, 0x40	; 64
     b02:	91 e0       	ldi	r25, 0x01	; 1
     b04:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
			nokia_lcd_set_cursor(0, 0);
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	0e 94 1d 07 	call	0xe3a	; 0xe3a <nokia_lcd_set_cursor>
			nokia_lcd_write_string("Casa  ",1);
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	88 e0       	ldi	r24, 0x08	; 8
     b14:	91 e0       	ldi	r25, 0x01	; 1
     b16:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
			int_to_str(temp_ADC, temp_string); //converte a temperatura em string
     b1a:	68 ea       	ldi	r22, 0xA8	; 168
     b1c:	73 e0       	ldi	r23, 0x03	; 3
     b1e:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <temp_ADC>
     b22:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <temp_ADC+0x1>
     b26:	0e 94 8b 01 	call	0x316	; 0x316 <int_to_str>
			nokia_lcd_write_string((char*)temp_string, 1); //Escreve o valor no buffer do LCD
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	88 ea       	ldi	r24, 0xA8	; 168
     b2e:	93 e0       	ldi	r25, 0x03	; 3
     b30:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
			int_to_str(temp_maior, temp_string); //converte a temperatura em string
     b34:	68 ea       	ldi	r22, 0xA8	; 168
     b36:	73 e0       	ldi	r23, 0x03	; 3
     b38:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <__data_end>
     b3c:	90 91 ab 01 	lds	r25, 0x01AB	; 0x8001ab <__data_end+0x1>
     b40:	0e 94 8b 01 	call	0x316	; 0x316 <int_to_str>
			nokia_lcd_write_char('/', 1);
     b44:	61 e0       	ldi	r22, 0x01	; 1
     b46:	8f e2       	ldi	r24, 0x2F	; 47
     b48:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
			nokia_lcd_write_string((char*)temp_string, 1); //Escreve o valor no buffer do LCD
     b4c:	61 e0       	ldi	r22, 0x01	; 1
     b4e:	88 ea       	ldi	r24, 0xA8	; 168
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	0e 94 0a 07 	call	0xe14	; 0xe14 <nokia_lcd_write_string>
			nokia_lcd_write_char('C', 1);
     b56:	61 e0       	ldi	r22, 0x01	; 1
     b58:	83 e4       	ldi	r24, 0x43	; 67
     b5a:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
			nokia_lcd_render();
     b5e:	0e 94 22 07 	call	0xe44	; 0xe44 <nokia_lcd_render>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b62:	2f ef       	ldi	r18, 0xFF	; 255
     b64:	89 e6       	ldi	r24, 0x69	; 105
     b66:	98 e1       	ldi	r25, 0x18	; 24
     b68:	21 50       	subi	r18, 0x01	; 1
     b6a:	80 40       	sbci	r24, 0x00	; 0
     b6c:	90 40       	sbci	r25, 0x00	; 0
     b6e:	e1 f7       	brne	.-8      	; 0xb68 <main+0x112>
     b70:	00 c0       	rjmp	.+0      	; 0xb72 <main+0x11c>
     b72:	00 00       	nop
     b74:	9e cf       	rjmp	.-196    	; 0xab2 <main+0x5c>

00000b76 <write>:
		nokia_lcd.screen[i] = 0x00;
}

void nokia_lcd_power(uint8_t on)
{
	write_cmd(on ? 0x20 : 0x24);
     b76:	29 98       	cbi	0x05, 1	; 5
     b78:	66 23       	and	r22, r22
     b7a:	11 f0       	breq	.+4      	; 0xb80 <write+0xa>
     b7c:	2b 9a       	sbi	0x05, 3	; 5
     b7e:	15 c0       	rjmp	.+42     	; 0xbaa <write+0x34>
     b80:	2b 98       	cbi	0x05, 3	; 5
     b82:	13 c0       	rjmp	.+38     	; 0xbaa <write+0x34>
     b84:	ac 01       	movw	r20, r24
     b86:	02 2e       	mov	r0, r18
     b88:	02 c0       	rjmp	.+4      	; 0xb8e <write+0x18>
     b8a:	55 95       	asr	r21
     b8c:	47 95       	ror	r20
     b8e:	0a 94       	dec	r0
     b90:	e2 f7       	brpl	.-8      	; 0xb8a <write+0x14>
     b92:	40 ff       	sbrs	r20, 0
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <write+0x24>
     b96:	2c 9a       	sbi	0x05, 4	; 5
     b98:	01 c0       	rjmp	.+2      	; 0xb9c <write+0x26>
     b9a:	2c 98       	cbi	0x05, 4	; 5
     b9c:	2d 9a       	sbi	0x05, 5	; 5
     b9e:	2d 98       	cbi	0x05, 5	; 5
     ba0:	21 50       	subi	r18, 0x01	; 1
     ba2:	31 09       	sbc	r19, r1
     ba4:	78 f7       	brcc	.-34     	; 0xb84 <write+0xe>
     ba6:	29 9a       	sbi	0x05, 1	; 5
     ba8:	08 95       	ret
     baa:	27 e0       	ldi	r18, 0x07	; 7
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	e9 cf       	rjmp	.-46     	; 0xb84 <write+0xe>

00000bb2 <write_cmd>:
     bb2:	60 e0       	ldi	r22, 0x00	; 0
     bb4:	0e 94 bb 05 	call	0xb76	; 0xb76 <write>
     bb8:	08 95       	ret

00000bba <nokia_lcd_init>:
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	21 9a       	sbi	0x04, 1	; 4
     bc0:	22 9a       	sbi	0x04, 2	; 4
     bc2:	23 9a       	sbi	0x04, 3	; 4
     bc4:	24 9a       	sbi	0x04, 4	; 4
     bc6:	25 9a       	sbi	0x04, 5	; 4
     bc8:	2a 9a       	sbi	0x05, 2	; 5
     bca:	29 9a       	sbi	0x05, 1	; 5
     bcc:	83 ec       	ldi	r24, 0xC3	; 195
     bce:	99 e0       	ldi	r25, 0x09	; 9
     bd0:	01 97       	sbiw	r24, 0x01	; 1
     bd2:	f1 f7       	brne	.-4      	; 0xbd0 <nokia_lcd_init+0x16>
     bd4:	00 c0       	rjmp	.+0      	; 0xbd6 <nokia_lcd_init+0x1c>
     bd6:	00 00       	nop
     bd8:	2a 98       	cbi	0x05, 2	; 5
     bda:	8b e5       	ldi	r24, 0x5B	; 91
     bdc:	94 e4       	ldi	r25, 0x44	; 68
     bde:	01 97       	sbiw	r24, 0x01	; 1
     be0:	f1 f7       	brne	.-4      	; 0xbde <nokia_lcd_init+0x24>
     be2:	00 c0       	rjmp	.+0      	; 0xbe4 <nokia_lcd_init+0x2a>
     be4:	00 00       	nop
     be6:	2a 9a       	sbi	0x05, 2	; 5
     be8:	29 98       	cbi	0x05, 1	; 5
     bea:	81 e2       	ldi	r24, 0x21	; 33
     bec:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     bf0:	83 e1       	ldi	r24, 0x13	; 19
     bf2:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     bf6:	86 e0       	ldi	r24, 0x06	; 6
     bf8:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     bfc:	82 ec       	ldi	r24, 0xC2	; 194
     bfe:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     c02:	80 e2       	ldi	r24, 0x20	; 32
     c04:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     c08:	89 e0       	ldi	r24, 0x09	; 9
     c0a:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     c0e:	80 e8       	ldi	r24, 0x80	; 128
     c10:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     c14:	80 e4       	ldi	r24, 0x40	; 64
     c16:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     c1a:	c8 ef       	ldi	r28, 0xF8	; 248
     c1c:	d1 e0       	ldi	r29, 0x01	; 1
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	0e 94 bb 05 	call	0xb76	; 0xb76 <write>
     c26:	21 97       	sbiw	r28, 0x01	; 1
     c28:	d1 f7       	brne	.-12     	; 0xc1e <nokia_lcd_init+0x64>
     c2a:	88 e0       	ldi	r24, 0x08	; 8
     c2c:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     c30:	8c e0       	ldi	r24, 0x0C	; 12
     c32:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	08 95       	ret

00000c3c <nokia_lcd_clear>:
     c3c:	80 e8       	ldi	r24, 0x80	; 128
     c3e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     c42:	80 e4       	ldi	r24, 0x40	; 64
     c44:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     c48:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <nokia_lcd+0x1f8>
     c4c:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <nokia_lcd+0x1f9>
     c50:	ee ea       	ldi	r30, 0xAE	; 174
     c52:	f1 e0       	ldi	r31, 0x01	; 1
     c54:	86 ea       	ldi	r24, 0xA6	; 166
     c56:	93 e0       	ldi	r25, 0x03	; 3
     c58:	11 92       	st	Z+, r1
     c5a:	e8 17       	cp	r30, r24
     c5c:	f9 07       	cpc	r31, r25
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <nokia_lcd_clear+0x1c>
     c60:	08 95       	ret

00000c62 <nokia_lcd_set_pixel>:
}

void nokia_lcd_set_pixel(uint8_t x, uint8_t y, uint8_t value)
{
	uint8_t *byte = &nokia_lcd.screen[y/8*84+x];
     c62:	26 2f       	mov	r18, r22
     c64:	26 95       	lsr	r18
     c66:	26 95       	lsr	r18
     c68:	26 95       	lsr	r18
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	34 e5       	ldi	r19, 0x54	; 84
     c6e:	23 9f       	mul	r18, r19
     c70:	80 0d       	add	r24, r0
     c72:	91 1d       	adc	r25, r1
     c74:	11 24       	eor	r1, r1
	if (value)
     c76:	44 23       	and	r20, r20
     c78:	79 f0       	breq	.+30     	; 0xc98 <nokia_lcd_set_pixel+0x36>
		*byte |= (1 << (y % 8));
     c7a:	fc 01       	movw	r30, r24
     c7c:	e2 55       	subi	r30, 0x52	; 82
     c7e:	fe 4f       	sbci	r31, 0xFE	; 254
     c80:	67 70       	andi	r22, 0x07	; 7
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	02 c0       	rjmp	.+4      	; 0xc8c <nokia_lcd_set_pixel+0x2a>
     c88:	88 0f       	add	r24, r24
     c8a:	99 1f       	adc	r25, r25
     c8c:	6a 95       	dec	r22
     c8e:	e2 f7       	brpl	.-8      	; 0xc88 <nokia_lcd_set_pixel+0x26>
     c90:	90 81       	ld	r25, Z
     c92:	89 2b       	or	r24, r25
     c94:	80 83       	st	Z, r24
     c96:	08 95       	ret
	else
		*byte &= ~(1 << (y %8 ));
     c98:	fc 01       	movw	r30, r24
     c9a:	e2 55       	subi	r30, 0x52	; 82
     c9c:	fe 4f       	sbci	r31, 0xFE	; 254
     c9e:	67 70       	andi	r22, 0x07	; 7
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	02 c0       	rjmp	.+4      	; 0xcaa <nokia_lcd_set_pixel+0x48>
     ca6:	88 0f       	add	r24, r24
     ca8:	99 1f       	adc	r25, r25
     caa:	6a 95       	dec	r22
     cac:	e2 f7       	brpl	.-8      	; 0xca6 <nokia_lcd_set_pixel+0x44>
     cae:	80 95       	com	r24
     cb0:	90 81       	ld	r25, Z
     cb2:	89 23       	and	r24, r25
     cb4:	80 83       	st	Z, r24
     cb6:	08 95       	ret

00000cb8 <nokia_lcd_write_char>:
}

void nokia_lcd_write_char(char code, uint8_t scale)
{
     cb8:	5f 92       	push	r5
     cba:	6f 92       	push	r6
     cbc:	7f 92       	push	r7
     cbe:	8f 92       	push	r8
     cc0:	9f 92       	push	r9
     cc2:	af 92       	push	r10
     cc4:	bf 92       	push	r11
     cc6:	cf 92       	push	r12
     cc8:	df 92       	push	r13
     cca:	ef 92       	push	r14
     ccc:	ff 92       	push	r15
     cce:	0f 93       	push	r16
     cd0:	1f 93       	push	r17
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	56 2e       	mov	r5, r22
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     cd8:	26 2f       	mov	r18, r22
     cda:	30 e0       	ldi	r19, 0x00	; 0
     cdc:	49 01       	movw	r8, r18
     cde:	88 0c       	add	r8, r8
     ce0:	99 1c       	adc	r9, r9
     ce2:	88 0c       	add	r8, r8
     ce4:	99 1c       	adc	r9, r9
     ce6:	82 0e       	add	r8, r18
     ce8:	93 1e       	adc	r9, r19
     cea:	18 14       	cp	r1, r8
     cec:	19 04       	cpc	r1, r9
     cee:	0c f0       	brlt	.+2      	; 0xcf2 <nokia_lcd_write_char+0x3a>
     cf0:	5d c0       	rjmp	.+186    	; 0xdac <nokia_lcd_write_char+0xf4>
		for (y = 0; y < 7*scale; y++)
     cf2:	89 01       	movw	r16, r18
     cf4:	00 0f       	add	r16, r16
     cf6:	11 1f       	adc	r17, r17
     cf8:	00 0f       	add	r16, r16
     cfa:	11 1f       	adc	r17, r17
     cfc:	00 0f       	add	r16, r16
     cfe:	11 1f       	adc	r17, r17
     d00:	02 1b       	sub	r16, r18
     d02:	13 0b       	sbc	r17, r19
     d04:	61 2c       	mov	r6, r1
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     d06:	a8 2e       	mov	r10, r24
     d08:	b1 2c       	mov	r11, r1
     d0a:	c5 01       	movw	r24, r10
     d0c:	80 97       	sbiw	r24, 0x20	; 32
     d0e:	5c 01       	movw	r10, r24
     d10:	aa 0c       	add	r10, r10
     d12:	bb 1c       	adc	r11, r11
     d14:	aa 0c       	add	r10, r10
     d16:	bb 1c       	adc	r11, r11
     d18:	a8 0e       	add	r10, r24
     d1a:	b9 1e       	adc	r11, r25
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     d1c:	0f 2e       	mov	r0, r31
     d1e:	f7 ea       	ldi	r31, 0xA7	; 167
     d20:	cf 2e       	mov	r12, r31
     d22:	f3 e0       	ldi	r31, 0x03	; 3
     d24:	df 2e       	mov	r13, r31
     d26:	f0 2d       	mov	r31, r0
     d28:	0f 2e       	mov	r0, r31
     d2a:	f6 ea       	ldi	r31, 0xA6	; 166
     d2c:	ef 2e       	mov	r14, r31
     d2e:	f3 e0       	ldi	r31, 0x03	; 3
     d30:	ff 2e       	mov	r15, r31
     d32:	f0 2d       	mov	r31, r0
     d34:	2d c0       	rjmp	.+90     	; 0xd90 <nokia_lcd_write_char+0xd8>
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     d36:	fe 01       	movw	r30, r28
     d38:	24 91       	lpm	r18, Z
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	87 2d       	mov	r24, r7
     d3e:	65 2d       	mov	r22, r5
     d40:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__udivmodqi4>
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <nokia_lcd_write_char+0x92>
     d46:	35 95       	asr	r19
     d48:	27 95       	ror	r18
     d4a:	8a 95       	dec	r24
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <nokia_lcd_write_char+0x8e>
     d4e:	20 ff       	sbrs	r18, 0
     d50:	0a c0       	rjmp	.+20     	; 0xd66 <nokia_lcd_write_char+0xae>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
     d52:	f6 01       	movw	r30, r12
     d54:	60 81       	ld	r22, Z
     d56:	67 0d       	add	r22, r7
     d58:	f7 01       	movw	r30, r14
     d5a:	80 81       	ld	r24, Z
     d5c:	41 e0       	ldi	r20, 0x01	; 1
     d5e:	86 0d       	add	r24, r6
     d60:	0e 94 31 06 	call	0xc62	; 0xc62 <nokia_lcd_set_pixel>
     d64:	09 c0       	rjmp	.+18     	; 0xd78 <nokia_lcd_write_char+0xc0>
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);
     d66:	f6 01       	movw	r30, r12
     d68:	60 81       	ld	r22, Z
     d6a:	67 0d       	add	r22, r7
     d6c:	f7 01       	movw	r30, r14
     d6e:	80 81       	ld	r24, Z
     d70:	40 e0       	ldi	r20, 0x00	; 0
     d72:	86 0d       	add	r24, r6
     d74:	0e 94 31 06 	call	0xc62	; 0xc62 <nokia_lcd_set_pixel>
void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
		for (y = 0; y < 7*scale; y++)
     d78:	73 94       	inc	r7
     d7a:	87 2d       	mov	r24, r7
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	80 17       	cp	r24, r16
     d80:	91 07       	cpc	r25, r17
     d82:	cc f2       	brlt	.-78     	; 0xd36 <nokia_lcd_write_char+0x7e>

void nokia_lcd_write_char(char code, uint8_t scale)
{
	register uint8_t x, y;

	for (x = 0; x < 5*scale; x++)
     d84:	63 94       	inc	r6
     d86:	86 2d       	mov	r24, r6
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	88 15       	cp	r24, r8
     d8c:	99 05       	cpc	r25, r9
     d8e:	74 f4       	brge	.+28     	; 0xdac <nokia_lcd_write_char+0xf4>
		for (y = 0; y < 7*scale; y++)
     d90:	10 16       	cp	r1, r16
     d92:	11 06       	cpc	r1, r17
     d94:	bc f7       	brge	.-18     	; 0xd84 <nokia_lcd_write_char+0xcc>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
     d96:	86 2d       	mov	r24, r6
     d98:	65 2d       	mov	r22, r5
     d9a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <__udivmodqi4>
     d9e:	e5 01       	movw	r28, r10
     da0:	c8 0f       	add	r28, r24
     da2:	d1 1d       	adc	r29, r1
     da4:	c8 50       	subi	r28, 0x08	; 8
     da6:	df 4f       	sbci	r29, 0xFF	; 255
     da8:	71 2c       	mov	r7, r1
     daa:	c5 cf       	rjmp	.-118    	; 0xd36 <nokia_lcd_write_char+0x7e>
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     dac:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <nokia_lcd+0x1f8>
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	98 0f       	add	r25, r24
     db4:	85 2d       	mov	r24, r5
     db6:	88 0f       	add	r24, r24
     db8:	88 0f       	add	r24, r24
     dba:	85 0d       	add	r24, r5
     dbc:	89 0f       	add	r24, r25
	if (nokia_lcd.cursor_x >= 84) {
     dbe:	84 35       	cpi	r24, 0x54	; 84
     dc0:	18 f4       	brcc	.+6      	; 0xdc8 <nokia_lcd_write_char+0x110>
			if (pgm_read_byte(&CHARSET[code-32][x/scale]) & (1 << y/scale))
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 1);
			else
				nokia_lcd_set_pixel(nokia_lcd.cursor_x + x, nokia_lcd.cursor_y + y, 0);

	nokia_lcd.cursor_x += 5*scale + 1;
     dc2:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <nokia_lcd+0x1f8>
     dc6:	0e c0       	rjmp	.+28     	; 0xde4 <nokia_lcd_write_char+0x12c>
	if (nokia_lcd.cursor_x >= 84) {
		nokia_lcd.cursor_x = 0;
     dc8:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y += 7*scale + 1;
     dcc:	e7 ea       	ldi	r30, 0xA7	; 167
     dce:	f3 e0       	ldi	r31, 0x03	; 3
     dd0:	80 81       	ld	r24, Z
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	98 0f       	add	r25, r24
     dd6:	85 2d       	mov	r24, r5
     dd8:	88 0f       	add	r24, r24
     dda:	88 0f       	add	r24, r24
     ddc:	88 0f       	add	r24, r24
     dde:	85 19       	sub	r24, r5
     de0:	89 0f       	add	r24, r25
     de2:	80 83       	st	Z, r24
	}
	if (nokia_lcd.cursor_y >= 48) {
     de4:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <nokia_lcd+0x1f9>
     de8:	80 33       	cpi	r24, 0x30	; 48
     dea:	20 f0       	brcs	.+8      	; 0xdf4 <nokia_lcd_write_char+0x13c>
		nokia_lcd.cursor_x = 0;
     dec:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <nokia_lcd+0x1f8>
		nokia_lcd.cursor_y = 0;
     df0:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <nokia_lcd+0x1f9>
	}
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	1f 91       	pop	r17
     dfa:	0f 91       	pop	r16
     dfc:	ff 90       	pop	r15
     dfe:	ef 90       	pop	r14
     e00:	df 90       	pop	r13
     e02:	cf 90       	pop	r12
     e04:	bf 90       	pop	r11
     e06:	af 90       	pop	r10
     e08:	9f 90       	pop	r9
     e0a:	8f 90       	pop	r8
     e0c:	7f 90       	pop	r7
     e0e:	6f 90       	pop	r6
     e10:	5f 90       	pop	r5
     e12:	08 95       	ret

00000e14 <nokia_lcd_write_string>:

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
     e14:	1f 93       	push	r17
     e16:	cf 93       	push	r28
     e18:	df 93       	push	r29
     e1a:	ec 01       	movw	r28, r24
	while(*str)
     e1c:	88 81       	ld	r24, Y
     e1e:	88 23       	and	r24, r24
     e20:	41 f0       	breq	.+16     	; 0xe32 <nokia_lcd_write_string+0x1e>
     e22:	16 2f       	mov	r17, r22
     e24:	21 96       	adiw	r28, 0x01	; 1
		nokia_lcd_write_char(*str++, scale);
     e26:	61 2f       	mov	r22, r17
     e28:	0e 94 5c 06 	call	0xcb8	; 0xcb8 <nokia_lcd_write_char>
	}
}

void nokia_lcd_write_string(const char *str, uint8_t scale)
{
	while(*str)
     e2c:	89 91       	ld	r24, Y+
     e2e:	81 11       	cpse	r24, r1
     e30:	fa cf       	rjmp	.-12     	; 0xe26 <nokia_lcd_write_string+0x12>
		nokia_lcd_write_char(*str++, scale);
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	08 95       	ret

00000e3a <nokia_lcd_set_cursor>:

void nokia_lcd_set_cursor(uint8_t x, uint8_t y)
{
	nokia_lcd.cursor_x = x;
     e3a:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <nokia_lcd+0x1f8>
	nokia_lcd.cursor_y = y;
     e3e:	60 93 a7 03 	sts	0x03A7, r22	; 0x8003a7 <nokia_lcd+0x1f9>
     e42:	08 95       	ret

00000e44 <nokia_lcd_render>:
}

void nokia_lcd_render(void)
{
     e44:	0f 93       	push	r16
     e46:	1f 93       	push	r17
     e48:	cf 93       	push	r28
     e4a:	df 93       	push	r29
	register unsigned i;
	/* Set column and row to 0 */
	write_cmd(0x80);
     e4c:	80 e8       	ldi	r24, 0x80	; 128
     e4e:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
	write_cmd(0x40);
     e52:	80 e4       	ldi	r24, 0x40	; 64
     e54:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <write_cmd>
     e58:	ce ea       	ldi	r28, 0xAE	; 174
     e5a:	d1 e0       	ldi	r29, 0x01	; 1
     e5c:	06 ea       	ldi	r16, 0xA6	; 166
     e5e:	13 e0       	ldi	r17, 0x03	; 3
	write(cmd, 0);
}

static void write_data(uint8_t data)
{
	write(data, 1);
     e60:	61 e0       	ldi	r22, 0x01	; 1
     e62:	89 91       	ld	r24, Y+
     e64:	0e 94 bb 05 	call	0xb76	; 0xb76 <write>
	/* Set column and row to 0 */
	write_cmd(0x80);
	write_cmd(0x40);

	/* Write screen to display */
	for (i = 0; i < 504; i++)
     e68:	c0 17       	cp	r28, r16
     e6a:	d1 07       	cpc	r29, r17
     e6c:	c9 f7       	brne	.-14     	; 0xe60 <nokia_lcd_render+0x1c>
		write_data(nokia_lcd.screen[i]);
}
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	08 95       	ret

00000e78 <__divsf3>:
     e78:	0e 94 50 07 	call	0xea0	; 0xea0 <__divsf3x>
     e7c:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_round>
     e80:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fp_pscB>
     e84:	58 f0       	brcs	.+22     	; 0xe9c <__divsf3+0x24>
     e86:	0e 94 23 08 	call	0x1046	; 0x1046 <__fp_pscA>
     e8a:	40 f0       	brcs	.+16     	; 0xe9c <__divsf3+0x24>
     e8c:	29 f4       	brne	.+10     	; 0xe98 <__divsf3+0x20>
     e8e:	5f 3f       	cpi	r21, 0xFF	; 255
     e90:	29 f0       	breq	.+10     	; 0xe9c <__divsf3+0x24>
     e92:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_inf>
     e96:	51 11       	cpse	r21, r1
     e98:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__fp_szero>
     e9c:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_nan>

00000ea0 <__divsf3x>:
     ea0:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_split3>
     ea4:	68 f3       	brcs	.-38     	; 0xe80 <__divsf3+0x8>

00000ea6 <__divsf3_pse>:
     ea6:	99 23       	and	r25, r25
     ea8:	b1 f3       	breq	.-20     	; 0xe96 <__divsf3+0x1e>
     eaa:	55 23       	and	r21, r21
     eac:	91 f3       	breq	.-28     	; 0xe92 <__divsf3+0x1a>
     eae:	95 1b       	sub	r25, r21
     eb0:	55 0b       	sbc	r21, r21
     eb2:	bb 27       	eor	r27, r27
     eb4:	aa 27       	eor	r26, r26
     eb6:	62 17       	cp	r22, r18
     eb8:	73 07       	cpc	r23, r19
     eba:	84 07       	cpc	r24, r20
     ebc:	38 f0       	brcs	.+14     	; 0xecc <__divsf3_pse+0x26>
     ebe:	9f 5f       	subi	r25, 0xFF	; 255
     ec0:	5f 4f       	sbci	r21, 0xFF	; 255
     ec2:	22 0f       	add	r18, r18
     ec4:	33 1f       	adc	r19, r19
     ec6:	44 1f       	adc	r20, r20
     ec8:	aa 1f       	adc	r26, r26
     eca:	a9 f3       	breq	.-22     	; 0xeb6 <__divsf3_pse+0x10>
     ecc:	35 d0       	rcall	.+106    	; 0xf38 <__divsf3_pse+0x92>
     ece:	0e 2e       	mov	r0, r30
     ed0:	3a f0       	brmi	.+14     	; 0xee0 <__divsf3_pse+0x3a>
     ed2:	e0 e8       	ldi	r30, 0x80	; 128
     ed4:	32 d0       	rcall	.+100    	; 0xf3a <__divsf3_pse+0x94>
     ed6:	91 50       	subi	r25, 0x01	; 1
     ed8:	50 40       	sbci	r21, 0x00	; 0
     eda:	e6 95       	lsr	r30
     edc:	00 1c       	adc	r0, r0
     ede:	ca f7       	brpl	.-14     	; 0xed2 <__divsf3_pse+0x2c>
     ee0:	2b d0       	rcall	.+86     	; 0xf38 <__divsf3_pse+0x92>
     ee2:	fe 2f       	mov	r31, r30
     ee4:	29 d0       	rcall	.+82     	; 0xf38 <__divsf3_pse+0x92>
     ee6:	66 0f       	add	r22, r22
     ee8:	77 1f       	adc	r23, r23
     eea:	88 1f       	adc	r24, r24
     eec:	bb 1f       	adc	r27, r27
     eee:	26 17       	cp	r18, r22
     ef0:	37 07       	cpc	r19, r23
     ef2:	48 07       	cpc	r20, r24
     ef4:	ab 07       	cpc	r26, r27
     ef6:	b0 e8       	ldi	r27, 0x80	; 128
     ef8:	09 f0       	breq	.+2      	; 0xefc <__divsf3_pse+0x56>
     efa:	bb 0b       	sbc	r27, r27
     efc:	80 2d       	mov	r24, r0
     efe:	bf 01       	movw	r22, r30
     f00:	ff 27       	eor	r31, r31
     f02:	93 58       	subi	r25, 0x83	; 131
     f04:	5f 4f       	sbci	r21, 0xFF	; 255
     f06:	3a f0       	brmi	.+14     	; 0xf16 <__divsf3_pse+0x70>
     f08:	9e 3f       	cpi	r25, 0xFE	; 254
     f0a:	51 05       	cpc	r21, r1
     f0c:	78 f0       	brcs	.+30     	; 0xf2c <__divsf3_pse+0x86>
     f0e:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_inf>
     f12:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__fp_szero>
     f16:	5f 3f       	cpi	r21, 0xFF	; 255
     f18:	e4 f3       	brlt	.-8      	; 0xf12 <__divsf3_pse+0x6c>
     f1a:	98 3e       	cpi	r25, 0xE8	; 232
     f1c:	d4 f3       	brlt	.-12     	; 0xf12 <__divsf3_pse+0x6c>
     f1e:	86 95       	lsr	r24
     f20:	77 95       	ror	r23
     f22:	67 95       	ror	r22
     f24:	b7 95       	ror	r27
     f26:	f7 95       	ror	r31
     f28:	9f 5f       	subi	r25, 0xFF	; 255
     f2a:	c9 f7       	brne	.-14     	; 0xf1e <__divsf3_pse+0x78>
     f2c:	88 0f       	add	r24, r24
     f2e:	91 1d       	adc	r25, r1
     f30:	96 95       	lsr	r25
     f32:	87 95       	ror	r24
     f34:	97 f9       	bld	r25, 7
     f36:	08 95       	ret
     f38:	e1 e0       	ldi	r30, 0x01	; 1
     f3a:	66 0f       	add	r22, r22
     f3c:	77 1f       	adc	r23, r23
     f3e:	88 1f       	adc	r24, r24
     f40:	bb 1f       	adc	r27, r27
     f42:	62 17       	cp	r22, r18
     f44:	73 07       	cpc	r23, r19
     f46:	84 07       	cpc	r24, r20
     f48:	ba 07       	cpc	r27, r26
     f4a:	20 f0       	brcs	.+8      	; 0xf54 <__divsf3_pse+0xae>
     f4c:	62 1b       	sub	r22, r18
     f4e:	73 0b       	sbc	r23, r19
     f50:	84 0b       	sbc	r24, r20
     f52:	ba 0b       	sbc	r27, r26
     f54:	ee 1f       	adc	r30, r30
     f56:	88 f7       	brcc	.-30     	; 0xf3a <__divsf3_pse+0x94>
     f58:	e0 95       	com	r30
     f5a:	08 95       	ret

00000f5c <__fixunssfsi>:
     f5c:	0e 94 4a 08 	call	0x1094	; 0x1094 <__fp_splitA>
     f60:	88 f0       	brcs	.+34     	; 0xf84 <__fixunssfsi+0x28>
     f62:	9f 57       	subi	r25, 0x7F	; 127
     f64:	98 f0       	brcs	.+38     	; 0xf8c <__fixunssfsi+0x30>
     f66:	b9 2f       	mov	r27, r25
     f68:	99 27       	eor	r25, r25
     f6a:	b7 51       	subi	r27, 0x17	; 23
     f6c:	b0 f0       	brcs	.+44     	; 0xf9a <__fixunssfsi+0x3e>
     f6e:	e1 f0       	breq	.+56     	; 0xfa8 <__fixunssfsi+0x4c>
     f70:	66 0f       	add	r22, r22
     f72:	77 1f       	adc	r23, r23
     f74:	88 1f       	adc	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	1a f0       	brmi	.+6      	; 0xf80 <__fixunssfsi+0x24>
     f7a:	ba 95       	dec	r27
     f7c:	c9 f7       	brne	.-14     	; 0xf70 <__fixunssfsi+0x14>
     f7e:	14 c0       	rjmp	.+40     	; 0xfa8 <__fixunssfsi+0x4c>
     f80:	b1 30       	cpi	r27, 0x01	; 1
     f82:	91 f0       	breq	.+36     	; 0xfa8 <__fixunssfsi+0x4c>
     f84:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_zero>
     f88:	b1 e0       	ldi	r27, 0x01	; 1
     f8a:	08 95       	ret
     f8c:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__fp_zero>
     f90:	67 2f       	mov	r22, r23
     f92:	78 2f       	mov	r23, r24
     f94:	88 27       	eor	r24, r24
     f96:	b8 5f       	subi	r27, 0xF8	; 248
     f98:	39 f0       	breq	.+14     	; 0xfa8 <__fixunssfsi+0x4c>
     f9a:	b9 3f       	cpi	r27, 0xF9	; 249
     f9c:	cc f3       	brlt	.-14     	; 0xf90 <__fixunssfsi+0x34>
     f9e:	86 95       	lsr	r24
     fa0:	77 95       	ror	r23
     fa2:	67 95       	ror	r22
     fa4:	b3 95       	inc	r27
     fa6:	d9 f7       	brne	.-10     	; 0xf9e <__fixunssfsi+0x42>
     fa8:	3e f4       	brtc	.+14     	; 0xfb8 <__fixunssfsi+0x5c>
     faa:	90 95       	com	r25
     fac:	80 95       	com	r24
     fae:	70 95       	com	r23
     fb0:	61 95       	neg	r22
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	8f 4f       	sbci	r24, 0xFF	; 255
     fb6:	9f 4f       	sbci	r25, 0xFF	; 255
     fb8:	08 95       	ret

00000fba <__floatunsisf>:
     fba:	e8 94       	clt
     fbc:	09 c0       	rjmp	.+18     	; 0xfd0 <__floatsisf+0x12>

00000fbe <__floatsisf>:
     fbe:	97 fb       	bst	r25, 7
     fc0:	3e f4       	brtc	.+14     	; 0xfd0 <__floatsisf+0x12>
     fc2:	90 95       	com	r25
     fc4:	80 95       	com	r24
     fc6:	70 95       	com	r23
     fc8:	61 95       	neg	r22
     fca:	7f 4f       	sbci	r23, 0xFF	; 255
     fcc:	8f 4f       	sbci	r24, 0xFF	; 255
     fce:	9f 4f       	sbci	r25, 0xFF	; 255
     fd0:	99 23       	and	r25, r25
     fd2:	a9 f0       	breq	.+42     	; 0xffe <__floatsisf+0x40>
     fd4:	f9 2f       	mov	r31, r25
     fd6:	96 e9       	ldi	r25, 0x96	; 150
     fd8:	bb 27       	eor	r27, r27
     fda:	93 95       	inc	r25
     fdc:	f6 95       	lsr	r31
     fde:	87 95       	ror	r24
     fe0:	77 95       	ror	r23
     fe2:	67 95       	ror	r22
     fe4:	b7 95       	ror	r27
     fe6:	f1 11       	cpse	r31, r1
     fe8:	f8 cf       	rjmp	.-16     	; 0xfda <__floatsisf+0x1c>
     fea:	fa f4       	brpl	.+62     	; 0x102a <__floatsisf+0x6c>
     fec:	bb 0f       	add	r27, r27
     fee:	11 f4       	brne	.+4      	; 0xff4 <__floatsisf+0x36>
     ff0:	60 ff       	sbrs	r22, 0
     ff2:	1b c0       	rjmp	.+54     	; 0x102a <__floatsisf+0x6c>
     ff4:	6f 5f       	subi	r22, 0xFF	; 255
     ff6:	7f 4f       	sbci	r23, 0xFF	; 255
     ff8:	8f 4f       	sbci	r24, 0xFF	; 255
     ffa:	9f 4f       	sbci	r25, 0xFF	; 255
     ffc:	16 c0       	rjmp	.+44     	; 0x102a <__floatsisf+0x6c>
     ffe:	88 23       	and	r24, r24
    1000:	11 f0       	breq	.+4      	; 0x1006 <__floatsisf+0x48>
    1002:	96 e9       	ldi	r25, 0x96	; 150
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <__floatsisf+0x6a>
    1006:	77 23       	and	r23, r23
    1008:	21 f0       	breq	.+8      	; 0x1012 <__floatsisf+0x54>
    100a:	9e e8       	ldi	r25, 0x8E	; 142
    100c:	87 2f       	mov	r24, r23
    100e:	76 2f       	mov	r23, r22
    1010:	05 c0       	rjmp	.+10     	; 0x101c <__floatsisf+0x5e>
    1012:	66 23       	and	r22, r22
    1014:	71 f0       	breq	.+28     	; 0x1032 <__floatsisf+0x74>
    1016:	96 e8       	ldi	r25, 0x86	; 134
    1018:	86 2f       	mov	r24, r22
    101a:	70 e0       	ldi	r23, 0x00	; 0
    101c:	60 e0       	ldi	r22, 0x00	; 0
    101e:	2a f0       	brmi	.+10     	; 0x102a <__floatsisf+0x6c>
    1020:	9a 95       	dec	r25
    1022:	66 0f       	add	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	da f7       	brpl	.-10     	; 0x1020 <__floatsisf+0x62>
    102a:	88 0f       	add	r24, r24
    102c:	96 95       	lsr	r25
    102e:	87 95       	ror	r24
    1030:	97 f9       	bld	r25, 7
    1032:	08 95       	ret

00001034 <__fp_inf>:
    1034:	97 f9       	bld	r25, 7
    1036:	9f 67       	ori	r25, 0x7F	; 127
    1038:	80 e8       	ldi	r24, 0x80	; 128
    103a:	70 e0       	ldi	r23, 0x00	; 0
    103c:	60 e0       	ldi	r22, 0x00	; 0
    103e:	08 95       	ret

00001040 <__fp_nan>:
    1040:	9f ef       	ldi	r25, 0xFF	; 255
    1042:	80 ec       	ldi	r24, 0xC0	; 192
    1044:	08 95       	ret

00001046 <__fp_pscA>:
    1046:	00 24       	eor	r0, r0
    1048:	0a 94       	dec	r0
    104a:	16 16       	cp	r1, r22
    104c:	17 06       	cpc	r1, r23
    104e:	18 06       	cpc	r1, r24
    1050:	09 06       	cpc	r0, r25
    1052:	08 95       	ret

00001054 <__fp_pscB>:
    1054:	00 24       	eor	r0, r0
    1056:	0a 94       	dec	r0
    1058:	12 16       	cp	r1, r18
    105a:	13 06       	cpc	r1, r19
    105c:	14 06       	cpc	r1, r20
    105e:	05 06       	cpc	r0, r21
    1060:	08 95       	ret

00001062 <__fp_round>:
    1062:	09 2e       	mov	r0, r25
    1064:	03 94       	inc	r0
    1066:	00 0c       	add	r0, r0
    1068:	11 f4       	brne	.+4      	; 0x106e <__fp_round+0xc>
    106a:	88 23       	and	r24, r24
    106c:	52 f0       	brmi	.+20     	; 0x1082 <__fp_round+0x20>
    106e:	bb 0f       	add	r27, r27
    1070:	40 f4       	brcc	.+16     	; 0x1082 <__fp_round+0x20>
    1072:	bf 2b       	or	r27, r31
    1074:	11 f4       	brne	.+4      	; 0x107a <__fp_round+0x18>
    1076:	60 ff       	sbrs	r22, 0
    1078:	04 c0       	rjmp	.+8      	; 0x1082 <__fp_round+0x20>
    107a:	6f 5f       	subi	r22, 0xFF	; 255
    107c:	7f 4f       	sbci	r23, 0xFF	; 255
    107e:	8f 4f       	sbci	r24, 0xFF	; 255
    1080:	9f 4f       	sbci	r25, 0xFF	; 255
    1082:	08 95       	ret

00001084 <__fp_split3>:
    1084:	57 fd       	sbrc	r21, 7
    1086:	90 58       	subi	r25, 0x80	; 128
    1088:	44 0f       	add	r20, r20
    108a:	55 1f       	adc	r21, r21
    108c:	59 f0       	breq	.+22     	; 0x10a4 <__fp_splitA+0x10>
    108e:	5f 3f       	cpi	r21, 0xFF	; 255
    1090:	71 f0       	breq	.+28     	; 0x10ae <__fp_splitA+0x1a>
    1092:	47 95       	ror	r20

00001094 <__fp_splitA>:
    1094:	88 0f       	add	r24, r24
    1096:	97 fb       	bst	r25, 7
    1098:	99 1f       	adc	r25, r25
    109a:	61 f0       	breq	.+24     	; 0x10b4 <__fp_splitA+0x20>
    109c:	9f 3f       	cpi	r25, 0xFF	; 255
    109e:	79 f0       	breq	.+30     	; 0x10be <__fp_splitA+0x2a>
    10a0:	87 95       	ror	r24
    10a2:	08 95       	ret
    10a4:	12 16       	cp	r1, r18
    10a6:	13 06       	cpc	r1, r19
    10a8:	14 06       	cpc	r1, r20
    10aa:	55 1f       	adc	r21, r21
    10ac:	f2 cf       	rjmp	.-28     	; 0x1092 <__fp_split3+0xe>
    10ae:	46 95       	lsr	r20
    10b0:	f1 df       	rcall	.-30     	; 0x1094 <__fp_splitA>
    10b2:	08 c0       	rjmp	.+16     	; 0x10c4 <__fp_splitA+0x30>
    10b4:	16 16       	cp	r1, r22
    10b6:	17 06       	cpc	r1, r23
    10b8:	18 06       	cpc	r1, r24
    10ba:	99 1f       	adc	r25, r25
    10bc:	f1 cf       	rjmp	.-30     	; 0x10a0 <__fp_splitA+0xc>
    10be:	86 95       	lsr	r24
    10c0:	71 05       	cpc	r23, r1
    10c2:	61 05       	cpc	r22, r1
    10c4:	08 94       	sec
    10c6:	08 95       	ret

000010c8 <__fp_zero>:
    10c8:	e8 94       	clt

000010ca <__fp_szero>:
    10ca:	bb 27       	eor	r27, r27
    10cc:	66 27       	eor	r22, r22
    10ce:	77 27       	eor	r23, r23
    10d0:	cb 01       	movw	r24, r22
    10d2:	97 f9       	bld	r25, 7
    10d4:	08 95       	ret

000010d6 <__mulsf3>:
    10d6:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__mulsf3x>
    10da:	0c 94 31 08 	jmp	0x1062	; 0x1062 <__fp_round>
    10de:	0e 94 23 08 	call	0x1046	; 0x1046 <__fp_pscA>
    10e2:	38 f0       	brcs	.+14     	; 0x10f2 <__mulsf3+0x1c>
    10e4:	0e 94 2a 08 	call	0x1054	; 0x1054 <__fp_pscB>
    10e8:	20 f0       	brcs	.+8      	; 0x10f2 <__mulsf3+0x1c>
    10ea:	95 23       	and	r25, r21
    10ec:	11 f0       	breq	.+4      	; 0x10f2 <__mulsf3+0x1c>
    10ee:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_inf>
    10f2:	0c 94 20 08 	jmp	0x1040	; 0x1040 <__fp_nan>
    10f6:	11 24       	eor	r1, r1
    10f8:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__fp_szero>

000010fc <__mulsf3x>:
    10fc:	0e 94 42 08 	call	0x1084	; 0x1084 <__fp_split3>
    1100:	70 f3       	brcs	.-36     	; 0x10de <__mulsf3+0x8>

00001102 <__mulsf3_pse>:
    1102:	95 9f       	mul	r25, r21
    1104:	c1 f3       	breq	.-16     	; 0x10f6 <__mulsf3+0x20>
    1106:	95 0f       	add	r25, r21
    1108:	50 e0       	ldi	r21, 0x00	; 0
    110a:	55 1f       	adc	r21, r21
    110c:	62 9f       	mul	r22, r18
    110e:	f0 01       	movw	r30, r0
    1110:	72 9f       	mul	r23, r18
    1112:	bb 27       	eor	r27, r27
    1114:	f0 0d       	add	r31, r0
    1116:	b1 1d       	adc	r27, r1
    1118:	63 9f       	mul	r22, r19
    111a:	aa 27       	eor	r26, r26
    111c:	f0 0d       	add	r31, r0
    111e:	b1 1d       	adc	r27, r1
    1120:	aa 1f       	adc	r26, r26
    1122:	64 9f       	mul	r22, r20
    1124:	66 27       	eor	r22, r22
    1126:	b0 0d       	add	r27, r0
    1128:	a1 1d       	adc	r26, r1
    112a:	66 1f       	adc	r22, r22
    112c:	82 9f       	mul	r24, r18
    112e:	22 27       	eor	r18, r18
    1130:	b0 0d       	add	r27, r0
    1132:	a1 1d       	adc	r26, r1
    1134:	62 1f       	adc	r22, r18
    1136:	73 9f       	mul	r23, r19
    1138:	b0 0d       	add	r27, r0
    113a:	a1 1d       	adc	r26, r1
    113c:	62 1f       	adc	r22, r18
    113e:	83 9f       	mul	r24, r19
    1140:	a0 0d       	add	r26, r0
    1142:	61 1d       	adc	r22, r1
    1144:	22 1f       	adc	r18, r18
    1146:	74 9f       	mul	r23, r20
    1148:	33 27       	eor	r19, r19
    114a:	a0 0d       	add	r26, r0
    114c:	61 1d       	adc	r22, r1
    114e:	23 1f       	adc	r18, r19
    1150:	84 9f       	mul	r24, r20
    1152:	60 0d       	add	r22, r0
    1154:	21 1d       	adc	r18, r1
    1156:	82 2f       	mov	r24, r18
    1158:	76 2f       	mov	r23, r22
    115a:	6a 2f       	mov	r22, r26
    115c:	11 24       	eor	r1, r1
    115e:	9f 57       	subi	r25, 0x7F	; 127
    1160:	50 40       	sbci	r21, 0x00	; 0
    1162:	9a f0       	brmi	.+38     	; 0x118a <__mulsf3_pse+0x88>
    1164:	f1 f0       	breq	.+60     	; 0x11a2 <__mulsf3_pse+0xa0>
    1166:	88 23       	and	r24, r24
    1168:	4a f0       	brmi	.+18     	; 0x117c <__mulsf3_pse+0x7a>
    116a:	ee 0f       	add	r30, r30
    116c:	ff 1f       	adc	r31, r31
    116e:	bb 1f       	adc	r27, r27
    1170:	66 1f       	adc	r22, r22
    1172:	77 1f       	adc	r23, r23
    1174:	88 1f       	adc	r24, r24
    1176:	91 50       	subi	r25, 0x01	; 1
    1178:	50 40       	sbci	r21, 0x00	; 0
    117a:	a9 f7       	brne	.-22     	; 0x1166 <__mulsf3_pse+0x64>
    117c:	9e 3f       	cpi	r25, 0xFE	; 254
    117e:	51 05       	cpc	r21, r1
    1180:	80 f0       	brcs	.+32     	; 0x11a2 <__mulsf3_pse+0xa0>
    1182:	0c 94 1a 08 	jmp	0x1034	; 0x1034 <__fp_inf>
    1186:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <__fp_szero>
    118a:	5f 3f       	cpi	r21, 0xFF	; 255
    118c:	e4 f3       	brlt	.-8      	; 0x1186 <__mulsf3_pse+0x84>
    118e:	98 3e       	cpi	r25, 0xE8	; 232
    1190:	d4 f3       	brlt	.-12     	; 0x1186 <__mulsf3_pse+0x84>
    1192:	86 95       	lsr	r24
    1194:	77 95       	ror	r23
    1196:	67 95       	ror	r22
    1198:	b7 95       	ror	r27
    119a:	f7 95       	ror	r31
    119c:	e7 95       	ror	r30
    119e:	9f 5f       	subi	r25, 0xFF	; 255
    11a0:	c1 f7       	brne	.-16     	; 0x1192 <__mulsf3_pse+0x90>
    11a2:	fe 2b       	or	r31, r30
    11a4:	88 0f       	add	r24, r24
    11a6:	91 1d       	adc	r25, r1
    11a8:	96 95       	lsr	r25
    11aa:	87 95       	ror	r24
    11ac:	97 f9       	bld	r25, 7
    11ae:	08 95       	ret

000011b0 <__udivmodqi4>:
    11b0:	99 1b       	sub	r25, r25
    11b2:	79 e0       	ldi	r23, 0x09	; 9
    11b4:	04 c0       	rjmp	.+8      	; 0x11be <__udivmodqi4_ep>

000011b6 <__udivmodqi4_loop>:
    11b6:	99 1f       	adc	r25, r25
    11b8:	96 17       	cp	r25, r22
    11ba:	08 f0       	brcs	.+2      	; 0x11be <__udivmodqi4_ep>
    11bc:	96 1b       	sub	r25, r22

000011be <__udivmodqi4_ep>:
    11be:	88 1f       	adc	r24, r24
    11c0:	7a 95       	dec	r23
    11c2:	c9 f7       	brne	.-14     	; 0x11b6 <__udivmodqi4_loop>
    11c4:	80 95       	com	r24
    11c6:	08 95       	ret

000011c8 <__tablejump2__>:
    11c8:	ee 0f       	add	r30, r30
    11ca:	ff 1f       	adc	r31, r31
    11cc:	05 90       	lpm	r0, Z+
    11ce:	f4 91       	lpm	r31, Z
    11d0:	e0 2d       	mov	r30, r0
    11d2:	09 94       	ijmp

000011d4 <__umulhisi3>:
    11d4:	a2 9f       	mul	r26, r18
    11d6:	b0 01       	movw	r22, r0
    11d8:	b3 9f       	mul	r27, r19
    11da:	c0 01       	movw	r24, r0
    11dc:	a3 9f       	mul	r26, r19
    11de:	70 0d       	add	r23, r0
    11e0:	81 1d       	adc	r24, r1
    11e2:	11 24       	eor	r1, r1
    11e4:	91 1d       	adc	r25, r1
    11e6:	b2 9f       	mul	r27, r18
    11e8:	70 0d       	add	r23, r0
    11ea:	81 1d       	adc	r24, r1
    11ec:	11 24       	eor	r1, r1
    11ee:	91 1d       	adc	r25, r1
    11f0:	08 95       	ret

000011f2 <eeprom_read_byte>:
    11f2:	f9 99       	sbic	0x1f, 1	; 31
    11f4:	fe cf       	rjmp	.-4      	; 0x11f2 <eeprom_read_byte>
    11f6:	92 bd       	out	0x22, r25	; 34
    11f8:	81 bd       	out	0x21, r24	; 33
    11fa:	f8 9a       	sbi	0x1f, 0	; 31
    11fc:	99 27       	eor	r25, r25
    11fe:	80 b5       	in	r24, 0x20	; 32
    1200:	08 95       	ret

00001202 <eeprom_update_byte>:
    1202:	26 2f       	mov	r18, r22

00001204 <eeprom_update_r18>:
    1204:	f9 99       	sbic	0x1f, 1	; 31
    1206:	fe cf       	rjmp	.-4      	; 0x1204 <eeprom_update_r18>
    1208:	92 bd       	out	0x22, r25	; 34
    120a:	81 bd       	out	0x21, r24	; 33
    120c:	f8 9a       	sbi	0x1f, 0	; 31
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	00 b4       	in	r0, 0x20	; 32
    1212:	02 16       	cp	r0, r18
    1214:	39 f0       	breq	.+14     	; 0x1224 <eeprom_update_r18+0x20>
    1216:	1f ba       	out	0x1f, r1	; 31
    1218:	20 bd       	out	0x20, r18	; 32
    121a:	0f b6       	in	r0, 0x3f	; 63
    121c:	f8 94       	cli
    121e:	fa 9a       	sbi	0x1f, 2	; 31
    1220:	f9 9a       	sbi	0x1f, 1	; 31
    1222:	0f be       	out	0x3f, r0	; 63
    1224:	08 95       	ret

00001226 <_exit>:
    1226:	f8 94       	cli

00001228 <__stop_program>:
    1228:	ff cf       	rjmp	.-2      	; 0x1228 <__stop_program>
